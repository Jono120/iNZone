#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4016
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Inzone.MailService.Kiosk
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="KioskMaster")]
	public partial class InZoneKioskDAL : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMailoutException(MailoutException instance);
    partial void UpdateMailoutException(MailoutException instance);
    partial void DeleteMailoutException(MailoutException instance);
    partial void InsertParticipant(Participant instance);
    partial void UpdateParticipant(Participant instance);
    partial void DeleteParticipant(Participant instance);
    partial void InsertInteraction(Interaction instance);
    partial void UpdateInteraction(Interaction instance);
    partial void DeleteInteraction(Interaction instance);
    partial void InsertServiceSubscription(ServiceSubscription instance);
    partial void UpdateServiceSubscription(ServiceSubscription instance);
    partial void DeleteServiceSubscription(ServiceSubscription instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertMailout(Mailout instance);
    partial void UpdateMailout(Mailout instance);
    partial void DeleteMailout(Mailout instance);
    partial void InsertPartner(Partner instance);
    partial void UpdatePartner(Partner instance);
    partial void DeletePartner(Partner instance);
    #endregion
		
		public InZoneKioskDAL() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["InzoneKioskWebserviceConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InZoneKioskDAL(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InZoneKioskDAL(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InZoneKioskDAL(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InZoneKioskDAL(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MailoutException> MailoutExceptions
		{
			get
			{
				return this.GetTable<MailoutException>();
			}
		}
		
		public System.Data.Linq.Table<Participant> Participants
		{
			get
			{
				return this.GetTable<Participant>();
			}
		}
		
		public System.Data.Linq.Table<Interaction> Interactions
		{
			get
			{
				return this.GetTable<Interaction>();
			}
		}
		
		public System.Data.Linq.Table<ServiceSubscription> ServiceSubscriptions
		{
			get
			{
				return this.GetTable<ServiceSubscription>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<Mailout> Mailouts
		{
			get
			{
				return this.GetTable<Mailout>();
			}
		}
		
		public System.Data.Linq.Table<Partner> Partners
		{
			get
			{
				return this.GetTable<Partner>();
			}
		}
	}
	
	[Table(Name="dbo.MailoutExceptions")]
	public partial class MailoutException : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MailoutID;
		
		private string _EmailAddress;
		
		private string _ErrorMessage;
		
		private EntityRef<Mailout> _Mailout;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMailoutIDChanging(int value);
    partial void OnMailoutIDChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public MailoutException()
		{
			this._Mailout = default(EntityRef<Mailout>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MailoutID", DbType="Int NOT NULL")]
		public int MailoutID
		{
			get
			{
				return this._MailoutID;
			}
			set
			{
				if ((this._MailoutID != value))
				{
					if (this._Mailout.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMailoutIDChanging(value);
					this.SendPropertyChanging();
					this._MailoutID = value;
					this.SendPropertyChanged("MailoutID");
					this.OnMailoutIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[Column(Storage="_ErrorMessage", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[Association(Name="Mailout_MailoutException", Storage="_Mailout", ThisKey="MailoutID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Mailout Mailout
		{
			get
			{
				return this._Mailout.Entity;
			}
			set
			{
				Mailout previousValue = this._Mailout.Entity;
				if (((previousValue != value) 
							|| (this._Mailout.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mailout.Entity = null;
						previousValue.MailoutExceptions.Remove(this);
					}
					this._Mailout.Entity = value;
					if ((value != null))
					{
						value.MailoutExceptions.Add(this);
						this._MailoutID = value.ID;
					}
					else
					{
						this._MailoutID = default(int);
					}
					this.SendPropertyChanged("Mailout");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Participant")]
	public partial class Participant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private System.Nullable<System.DateTime> _DateOfBirth;
		
		private string _SecurityQuestion;
		
		private string _SecurityAnswer;
		
		private string _UserName;
		
		private string _Password;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Suburb;
		
		private string _Town;
		
		private string _PhoneNumber;
		
		private bool _KnowsCareer;
		
		private System.Nullable<char> _Gender;
		
		private string _KioskID;
		
		private System.Nullable<System.DateTime> _DateCreated;
		
		private System.Nullable<int> _update_originator_id;
		
		private System.Data.Linq.Binary _update_timestamp;
		
		private System.Nullable<long> _create_timestamp;
		
		private System.Nullable<System.DateTime> _DateUploaded;
		
		private System.Nullable<System.DateTime> _DateModified;
		
		private EntitySet<Interaction> _Interactions;
		
		private EntitySet<Mailout> _Mailouts;
		
		private EntitySet<Mailout> _Mailouts1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnSecurityQuestionChanging(string value);
    partial void OnSecurityQuestionChanged();
    partial void OnSecurityAnswerChanging(string value);
    partial void OnSecurityAnswerChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnSuburbChanging(string value);
    partial void OnSuburbChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnKnowsCareerChanging(bool value);
    partial void OnKnowsCareerChanged();
    partial void OnGenderChanging(System.Nullable<char> value);
    partial void OnGenderChanged();
    partial void OnKioskIDChanging(string value);
    partial void OnKioskIDChanged();
    partial void OnDateCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateCreatedChanged();
    partial void Onupdate_originator_idChanging(System.Nullable<int> value);
    partial void Onupdate_originator_idChanged();
    partial void Onupdate_timestampChanging(System.Data.Linq.Binary value);
    partial void Onupdate_timestampChanged();
    partial void Oncreate_timestampChanging(System.Nullable<long> value);
    partial void Oncreate_timestampChanged();
    partial void OnDateUploadedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateUploadedChanged();
    partial void OnDateModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateModifiedChanged();
    #endregion
		
		public Participant()
		{
			this._Interactions = new EntitySet<Interaction>(new Action<Interaction>(this.attach_Interactions), new Action<Interaction>(this.detach_Interactions));
			this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
			this._Mailouts1 = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts1), new Action<Mailout>(this.detach_Mailouts1));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_DateOfBirth", DbType="SmallDateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityQuestion", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityQuestion
		{
			get
			{
				return this._SecurityQuestion;
			}
			set
			{
				if ((this._SecurityQuestion != value))
				{
					this.OnSecurityQuestionChanging(value);
					this.SendPropertyChanging();
					this._SecurityQuestion = value;
					this.SendPropertyChanged("SecurityQuestion");
					this.OnSecurityQuestionChanged();
				}
			}
		}
		
		[Column(Storage="_SecurityAnswer", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string SecurityAnswer
		{
			get
			{
				return this._SecurityAnswer;
			}
			set
			{
				if ((this._SecurityAnswer != value))
				{
					this.OnSecurityAnswerChanging(value);
					this.SendPropertyChanging();
					this._SecurityAnswer = value;
					this.SendPropertyChanged("SecurityAnswer");
					this.OnSecurityAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_Address1", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[Column(Storage="_Address2", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[Column(Storage="_Suburb", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string Suburb
		{
			get
			{
				return this._Suburb;
			}
			set
			{
				if ((this._Suburb != value))
				{
					this.OnSuburbChanging(value);
					this.SendPropertyChanging();
					this._Suburb = value;
					this.SendPropertyChanged("Suburb");
					this.OnSuburbChanged();
				}
			}
		}
		
		[Column(Storage="_Town", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="VarChar(30)", UpdateCheck=UpdateCheck.Never)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_KnowsCareer", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool KnowsCareer
		{
			get
			{
				return this._KnowsCareer;
			}
			set
			{
				if ((this._KnowsCareer != value))
				{
					this.OnKnowsCareerChanging(value);
					this.SendPropertyChanging();
					this._KnowsCareer = value;
					this.SendPropertyChanged("KnowsCareer");
					this.OnKnowsCareerChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="Char(1)", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<char> Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_KioskID", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string KioskID
		{
			get
			{
				return this._KioskID;
			}
			set
			{
				if ((this._KioskID != value))
				{
					this.OnKioskIDChanging(value);
					this.SendPropertyChanging();
					this._KioskID = value;
					this.SendPropertyChanged("KioskID");
					this.OnKioskIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_update_originator_id", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> update_originator_id
		{
			get
			{
				return this._update_originator_id;
			}
			set
			{
				if ((this._update_originator_id != value))
				{
					this.Onupdate_originator_idChanging(value);
					this.SendPropertyChanging();
					this._update_originator_id = value;
					this.SendPropertyChanged("update_originator_id");
					this.Onupdate_originator_idChanged();
				}
			}
		}
		
		[Column(Storage="_update_timestamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary update_timestamp
		{
			get
			{
				return this._update_timestamp;
			}
			set
			{
				if ((this._update_timestamp != value))
				{
					this.Onupdate_timestampChanging(value);
					this.SendPropertyChanging();
					this._update_timestamp = value;
					this.SendPropertyChanged("update_timestamp");
					this.Onupdate_timestampChanged();
				}
			}
		}
		
		[Column(Storage="_create_timestamp", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> create_timestamp
		{
			get
			{
				return this._create_timestamp;
			}
			set
			{
				if ((this._create_timestamp != value))
				{
					this.Oncreate_timestampChanging(value);
					this.SendPropertyChanging();
					this._create_timestamp = value;
					this.SendPropertyChanged("create_timestamp");
					this.Oncreate_timestampChanged();
				}
			}
		}
		
		[Column(Storage="_DateUploaded", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateUploaded
		{
			get
			{
				return this._DateUploaded;
			}
			set
			{
				if ((this._DateUploaded != value))
				{
					this.OnDateUploadedChanging(value);
					this.SendPropertyChanging();
					this._DateUploaded = value;
					this.SendPropertyChanged("DateUploaded");
					this.OnDateUploadedChanged();
				}
			}
		}
		
		[Column(Storage="_DateModified", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[Association(Name="Participant_Interaction", Storage="_Interactions", ThisKey="ID", OtherKey="ParticipantID")]
		public EntitySet<Interaction> Interactions
		{
			get
			{
				return this._Interactions;
			}
			set
			{
				this._Interactions.Assign(value);
			}
		}
		
		[Association(Name="Participant_Mailout", Storage="_Mailouts", ThisKey="ID", OtherKey="ParticipantID")]
		public EntitySet<Mailout> Mailouts
		{
			get
			{
				return this._Mailouts;
			}
			set
			{
				this._Mailouts.Assign(value);
			}
		}
		
		[Association(Name="Participant_Mailout1", Storage="_Mailouts1", ThisKey="ID", OtherKey="ParticipantID")]
		public EntitySet<Mailout> Mailouts1
		{
			get
			{
				return this._Mailouts1;
			}
			set
			{
				this._Mailouts1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Participant = this;
		}
		
		private void detach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Participant = null;
		}
		
		private void attach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Participant = this;
		}
		
		private void detach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Participant = null;
		}
		
		private void attach_Mailouts1(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Participant1 = this;
		}
		
		private void detach_Mailouts1(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Participant1 = null;
		}
	}
	
	[Table(Name="dbo.Interaction")]
	public partial class Interaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _ParticipantID;
		
		private int _PartnerID;
		
		private bool _Subscribed;
		
		private System.DateTime _DateCreated;
		
		private System.Nullable<int> _update_originator_id;
		
		private System.Data.Linq.Binary _update_timestamp;
		
		private System.Nullable<long> _create_timestamp;
		
		private EntitySet<Mailout> _Mailouts;
		
		private EntityRef<Participant> _Participant;
		
		private EntityRef<Partner> _Partner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnParticipantIDChanging(System.Guid value);
    partial void OnParticipantIDChanged();
    partial void OnPartnerIDChanging(int value);
    partial void OnPartnerIDChanged();
    partial void OnSubscribedChanging(bool value);
    partial void OnSubscribedChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    partial void Onupdate_originator_idChanging(System.Nullable<int> value);
    partial void Onupdate_originator_idChanged();
    partial void Onupdate_timestampChanging(System.Data.Linq.Binary value);
    partial void Onupdate_timestampChanged();
    partial void Oncreate_timestampChanging(System.Nullable<long> value);
    partial void Oncreate_timestampChanged();
    #endregion
		
		public Interaction()
		{
			this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
			this._Participant = default(EntityRef<Participant>);
			this._Partner = default(EntityRef<Partner>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParticipantID", DbType="UniqueIdentifier NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Guid ParticipantID
		{
			get
			{
				return this._ParticipantID;
			}
			set
			{
				if ((this._ParticipantID != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipantIDChanging(value);
					this.SendPropertyChanging();
					this._ParticipantID = value;
					this.SendPropertyChanged("ParticipantID");
					this.OnParticipantIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Subscribed", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Subscribed
		{
			get
			{
				return this._Subscribed;
			}
			set
			{
				if ((this._Subscribed != value))
				{
					this.OnSubscribedChanging(value);
					this.SendPropertyChanging();
					this._Subscribed = value;
					this.SendPropertyChanged("Subscribed");
					this.OnSubscribedChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_update_originator_id", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> update_originator_id
		{
			get
			{
				return this._update_originator_id;
			}
			set
			{
				if ((this._update_originator_id != value))
				{
					this.Onupdate_originator_idChanging(value);
					this.SendPropertyChanging();
					this._update_originator_id = value;
					this.SendPropertyChanged("update_originator_id");
					this.Onupdate_originator_idChanged();
				}
			}
		}
		
		[Column(Storage="_update_timestamp", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary update_timestamp
		{
			get
			{
				return this._update_timestamp;
			}
			set
			{
				if ((this._update_timestamp != value))
				{
					this.Onupdate_timestampChanging(value);
					this.SendPropertyChanging();
					this._update_timestamp = value;
					this.SendPropertyChanged("update_timestamp");
					this.Onupdate_timestampChanged();
				}
			}
		}
		
		[Column(Storage="_create_timestamp", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> create_timestamp
		{
			get
			{
				return this._create_timestamp;
			}
			set
			{
				if ((this._create_timestamp != value))
				{
					this.Oncreate_timestampChanging(value);
					this.SendPropertyChanging();
					this._create_timestamp = value;
					this.SendPropertyChanged("create_timestamp");
					this.Oncreate_timestampChanged();
				}
			}
		}
		
		[Association(Name="Interaction_Mailout", Storage="_Mailouts", ThisKey="ID", OtherKey="InteractionUsedID")]
		public EntitySet<Mailout> Mailouts
		{
			get
			{
				return this._Mailouts;
			}
			set
			{
				this._Mailouts.Assign(value);
			}
		}
		
		[Association(Name="Participant_Interaction", Storage="_Participant", ThisKey="ParticipantID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Participant Participant
		{
			get
			{
				return this._Participant.Entity;
			}
			set
			{
				Participant previousValue = this._Participant.Entity;
				if (((previousValue != value) 
							|| (this._Participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant.Entity = null;
						previousValue.Interactions.Remove(this);
					}
					this._Participant.Entity = value;
					if ((value != null))
					{
						value.Interactions.Add(this);
						this._ParticipantID = value.ID;
					}
					else
					{
						this._ParticipantID = default(System.Guid);
					}
					this.SendPropertyChanged("Participant");
				}
			}
		}
		
		[Association(Name="Partner_Interaction", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.Interactions.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.Interactions.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(int);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Interaction = this;
		}
		
		private void detach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Interaction = null;
		}
	}
	
	[Table(Name="dbo.ServiceSubscriptions")]
	public partial class ServiceSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PartnerID;
		
		private int _ServiceID;
		
		private System.DateTime _DateStart;
		
		private System.DateTime _DateEnd;
		
		private System.Xml.Linq.XElement _Parameters;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Partner> _Partner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPartnerIDChanging(int value);
    partial void OnPartnerIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnDateStartChanging(System.DateTime value);
    partial void OnDateStartChanged();
    partial void OnDateEndChanging(System.DateTime value);
    partial void OnDateEndChanged();
    partial void OnParametersChanging(System.Xml.Linq.XElement value);
    partial void OnParametersChanged();
    #endregion
		
		public ServiceSubscription()
		{
			this._Service = default(EntityRef<Service>);
			this._Partner = default(EntityRef<Partner>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int NOT NULL")]
		public int PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateStart", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateStart
		{
			get
			{
				return this._DateStart;
			}
			set
			{
				if ((this._DateStart != value))
				{
					this.OnDateStartChanging(value);
					this.SendPropertyChanging();
					this._DateStart = value;
					this.SendPropertyChanged("DateStart");
					this.OnDateStartChanged();
				}
			}
		}
		
		[Column(Storage="_DateEnd", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[Column(Storage="_Parameters", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				if ((this._Parameters != value))
				{
					this.OnParametersChanging(value);
					this.SendPropertyChanging();
					this._Parameters = value;
					this.SendPropertyChanged("Parameters");
					this.OnParametersChanged();
				}
			}
		}
		
		[Association(Name="Service_ServiceSubscription", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceSubscriptions.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceSubscriptions.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[Association(Name="Partner_ServiceSubscription", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.ServiceSubscriptions.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.ServiceSubscriptions.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(int);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<ServiceSubscription> _ServiceSubscriptions;
		
		private EntitySet<Mailout> _Mailouts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Service()
		{
			this._ServiceSubscriptions = new EntitySet<ServiceSubscription>(new Action<ServiceSubscription>(this.attach_ServiceSubscriptions), new Action<ServiceSubscription>(this.detach_ServiceSubscriptions));
			this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Service_ServiceSubscription", Storage="_ServiceSubscriptions", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<ServiceSubscription> ServiceSubscriptions
		{
			get
			{
				return this._ServiceSubscriptions;
			}
			set
			{
				this._ServiceSubscriptions.Assign(value);
			}
		}
		
		[Association(Name="Service_Mailout", Storage="_Mailouts", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<Mailout> Mailouts
		{
			get
			{
				return this._Mailouts;
			}
			set
			{
				this._Mailouts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ServiceSubscriptions(ServiceSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceSubscriptions(ServiceSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[Table(Name="dbo.Mailouts")]
	public partial class Mailout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Guid _ParticipantID;
		
		private int _PartnerID;
		
		private System.Guid _InteractionUsedID;
		
		private int _ServiceID;
		
		private System.Nullable<System.DateTime> _DateSent;
		
		private System.Nullable<System.DateTime> _DateResponded;
		
		private EntitySet<MailoutException> _MailoutExceptions;
		
		private EntityRef<Interaction> _Interaction;
		
		private EntityRef<Participant> _Participant;
		
		private EntityRef<Participant> _Participant1;
		
		private EntityRef<Service> _Service;
		
		private EntityRef<Partner> _Partner;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParticipantIDChanging(System.Guid value);
    partial void OnParticipantIDChanged();
    partial void OnPartnerIDChanging(int value);
    partial void OnPartnerIDChanged();
    partial void OnInteractionUsedIDChanging(System.Guid value);
    partial void OnInteractionUsedIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnDateSentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSentChanged();
    partial void OnDateRespondedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRespondedChanged();
    #endregion
		
		public Mailout()
		{
			this._MailoutExceptions = new EntitySet<MailoutException>(new Action<MailoutException>(this.attach_MailoutExceptions), new Action<MailoutException>(this.detach_MailoutExceptions));
			this._Interaction = default(EntityRef<Interaction>);
			this._Participant = default(EntityRef<Participant>);
			this._Participant1 = default(EntityRef<Participant>);
			this._Service = default(EntityRef<Service>);
			this._Partner = default(EntityRef<Partner>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParticipantID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ParticipantID
		{
			get
			{
				return this._ParticipantID;
			}
			set
			{
				if ((this._ParticipantID != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipantIDChanging(value);
					this.SendPropertyChanging();
					this._ParticipantID = value;
					this.SendPropertyChanged("ParticipantID");
					this.OnParticipantIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerID", DbType="Int NOT NULL")]
		public int PartnerID
		{
			get
			{
				return this._PartnerID;
			}
			set
			{
				if ((this._PartnerID != value))
				{
					if (this._Partner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartnerIDChanging(value);
					this.SendPropertyChanging();
					this._PartnerID = value;
					this.SendPropertyChanged("PartnerID");
					this.OnPartnerIDChanged();
				}
			}
		}
		
		[Column(Storage="_InteractionUsedID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid InteractionUsedID
		{
			get
			{
				return this._InteractionUsedID;
			}
			set
			{
				if ((this._InteractionUsedID != value))
				{
					if (this._Interaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionUsedIDChanging(value);
					this.SendPropertyChanging();
					this._InteractionUsedID = value;
					this.SendPropertyChanged("InteractionUsedID");
					this.OnInteractionUsedIDChanged();
				}
			}
		}
		
		[Column(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[Column(Storage="_DateSent", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSent
		{
			get
			{
				return this._DateSent;
			}
			set
			{
				if ((this._DateSent != value))
				{
					this.OnDateSentChanging(value);
					this.SendPropertyChanging();
					this._DateSent = value;
					this.SendPropertyChanged("DateSent");
					this.OnDateSentChanged();
				}
			}
		}
		
		[Column(Storage="_DateResponded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateResponded
		{
			get
			{
				return this._DateResponded;
			}
			set
			{
				if ((this._DateResponded != value))
				{
					this.OnDateRespondedChanging(value);
					this.SendPropertyChanging();
					this._DateResponded = value;
					this.SendPropertyChanged("DateResponded");
					this.OnDateRespondedChanged();
				}
			}
		}
		
		[Association(Name="Mailout_MailoutException", Storage="_MailoutExceptions", ThisKey="ID", OtherKey="MailoutID")]
		public EntitySet<MailoutException> MailoutExceptions
		{
			get
			{
				return this._MailoutExceptions;
			}
			set
			{
				this._MailoutExceptions.Assign(value);
			}
		}
		
		[Association(Name="Interaction_Mailout", Storage="_Interaction", ThisKey="InteractionUsedID", OtherKey="ID", IsForeignKey=true)]
		public Interaction Interaction
		{
			get
			{
				return this._Interaction.Entity;
			}
			set
			{
				Interaction previousValue = this._Interaction.Entity;
				if (((previousValue != value) 
							|| (this._Interaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Interaction.Entity = null;
						previousValue.Mailouts.Remove(this);
					}
					this._Interaction.Entity = value;
					if ((value != null))
					{
						value.Mailouts.Add(this);
						this._InteractionUsedID = value.ID;
					}
					else
					{
						this._InteractionUsedID = default(System.Guid);
					}
					this.SendPropertyChanged("Interaction");
				}
			}
		}
		
		[Association(Name="Participant_Mailout", Storage="_Participant", ThisKey="ParticipantID", OtherKey="ID", IsForeignKey=true)]
		public Participant Participant
		{
			get
			{
				return this._Participant.Entity;
			}
			set
			{
				Participant previousValue = this._Participant.Entity;
				if (((previousValue != value) 
							|| (this._Participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant.Entity = null;
						previousValue.Mailouts.Remove(this);
					}
					this._Participant.Entity = value;
					if ((value != null))
					{
						value.Mailouts.Add(this);
						this._ParticipantID = value.ID;
					}
					else
					{
						this._ParticipantID = default(System.Guid);
					}
					this.SendPropertyChanged("Participant");
				}
			}
		}
		
		[Association(Name="Participant_Mailout1", Storage="_Participant1", ThisKey="ParticipantID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Participant Participant1
		{
			get
			{
				return this._Participant1.Entity;
			}
			set
			{
				Participant previousValue = this._Participant1.Entity;
				if (((previousValue != value) 
							|| (this._Participant1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant1.Entity = null;
						previousValue.Mailouts1.Remove(this);
					}
					this._Participant1.Entity = value;
					if ((value != null))
					{
						value.Mailouts1.Add(this);
						this._ParticipantID = value.ID;
					}
					else
					{
						this._ParticipantID = default(System.Guid);
					}
					this.SendPropertyChanged("Participant1");
				}
			}
		}
		
		[Association(Name="Service_Mailout", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Mailouts.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Mailouts.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		[Association(Name="Partner_Mailout", Storage="_Partner", ThisKey="PartnerID", OtherKey="ID", IsForeignKey=true)]
		public Partner Partner
		{
			get
			{
				return this._Partner.Entity;
			}
			set
			{
				Partner previousValue = this._Partner.Entity;
				if (((previousValue != value) 
							|| (this._Partner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Partner.Entity = null;
						previousValue.Mailouts.Remove(this);
					}
					this._Partner.Entity = value;
					if ((value != null))
					{
						value.Mailouts.Add(this);
						this._PartnerID = value.ID;
					}
					else
					{
						this._PartnerID = default(int);
					}
					this.SendPropertyChanged("Partner");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MailoutExceptions(MailoutException entity)
		{
			this.SendPropertyChanging();
			entity.Mailout = this;
		}
		
		private void detach_MailoutExceptions(MailoutException entity)
		{
			this.SendPropertyChanging();
			entity.Mailout = null;
		}
	}
	
	[Table(Name="dbo.Partner")]
	public partial class Partner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PartnerName;
		
		private string _ShortName;
		
		private string _Industry;
		
		private System.Nullable<bool> _Active;
		
		private string _DataFileFrequency;
		
		private System.Nullable<System.DateTime> _LastDate;
		
		private bool _RptGenerated;
		
		private string _DisplayName;
		
		private string _LogoURL;
		
		private string _WebsiteURL;
		
		private EntitySet<Interaction> _Interactions;
		
		private EntitySet<ServiceSubscription> _ServiceSubscriptions;
		
		private EntitySet<Mailout> _Mailouts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPartnerNameChanging(string value);
    partial void OnPartnerNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnIndustryChanging(string value);
    partial void OnIndustryChanged();
    partial void OnActiveChanging(System.Nullable<bool> value);
    partial void OnActiveChanged();
    partial void OnDataFileFrequencyChanging(string value);
    partial void OnDataFileFrequencyChanged();
    partial void OnLastDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastDateChanged();
    partial void OnRptGeneratedChanging(bool value);
    partial void OnRptGeneratedChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    partial void OnWebsiteURLChanging(string value);
    partial void OnWebsiteURLChanged();
    #endregion
		
		public Partner()
		{
			this._Interactions = new EntitySet<Interaction>(new Action<Interaction>(this.attach_Interactions), new Action<Interaction>(this.detach_Interactions));
			this._ServiceSubscriptions = new EntitySet<ServiceSubscription>(new Action<ServiceSubscription>(this.attach_ServiceSubscriptions), new Action<ServiceSubscription>(this.detach_ServiceSubscriptions));
			this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PartnerName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PartnerName
		{
			get
			{
				return this._PartnerName;
			}
			set
			{
				if ((this._PartnerName != value))
				{
					this.OnPartnerNameChanging(value);
					this.SendPropertyChanging();
					this._PartnerName = value;
					this.SendPropertyChanged("PartnerName");
					this.OnPartnerNameChanged();
				}
			}
		}
		
		[Column(Storage="_ShortName", DbType="VarChar(50)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[Column(Storage="_Industry", DbType="VarChar(50)")]
		public string Industry
		{
			get
			{
				return this._Industry;
			}
			set
			{
				if ((this._Industry != value))
				{
					this.OnIndustryChanging(value);
					this.SendPropertyChanging();
					this._Industry = value;
					this.SendPropertyChanged("Industry");
					this.OnIndustryChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit")]
		public System.Nullable<bool> Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_DataFileFrequency", DbType="VarChar(20)")]
		public string DataFileFrequency
		{
			get
			{
				return this._DataFileFrequency;
			}
			set
			{
				if ((this._DataFileFrequency != value))
				{
					this.OnDataFileFrequencyChanging(value);
					this.SendPropertyChanging();
					this._DataFileFrequency = value;
					this.SendPropertyChanged("DataFileFrequency");
					this.OnDataFileFrequencyChanged();
				}
			}
		}
		
		[Column(Storage="_LastDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastDate
		{
			get
			{
				return this._LastDate;
			}
			set
			{
				if ((this._LastDate != value))
				{
					this.OnLastDateChanging(value);
					this.SendPropertyChanging();
					this._LastDate = value;
					this.SendPropertyChanged("LastDate");
					this.OnLastDateChanged();
				}
			}
		}
		
		[Column(Storage="_RptGenerated", DbType="Bit NOT NULL")]
		public bool RptGenerated
		{
			get
			{
				return this._RptGenerated;
			}
			set
			{
				if ((this._RptGenerated != value))
				{
					this.OnRptGeneratedChanging(value);
					this.SendPropertyChanging();
					this._RptGenerated = value;
					this.SendPropertyChanged("RptGenerated");
					this.OnRptGeneratedChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="VarChar(50)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_LogoURL", DbType="VarChar(255)")]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[Column(Storage="_WebsiteURL", DbType="VarChar(255)")]
		public string WebsiteURL
		{
			get
			{
				return this._WebsiteURL;
			}
			set
			{
				if ((this._WebsiteURL != value))
				{
					this.OnWebsiteURLChanging(value);
					this.SendPropertyChanging();
					this._WebsiteURL = value;
					this.SendPropertyChanged("WebsiteURL");
					this.OnWebsiteURLChanged();
				}
			}
		}
		
		[Association(Name="Partner_Interaction", Storage="_Interactions", ThisKey="ID", OtherKey="PartnerID")]
		public EntitySet<Interaction> Interactions
		{
			get
			{
				return this._Interactions;
			}
			set
			{
				this._Interactions.Assign(value);
			}
		}
		
		[Association(Name="Partner_ServiceSubscription", Storage="_ServiceSubscriptions", ThisKey="ID", OtherKey="PartnerID")]
		public EntitySet<ServiceSubscription> ServiceSubscriptions
		{
			get
			{
				return this._ServiceSubscriptions;
			}
			set
			{
				this._ServiceSubscriptions.Assign(value);
			}
		}
		
		[Association(Name="Partner_Mailout", Storage="_Mailouts", ThisKey="ID", OtherKey="PartnerID")]
		public EntitySet<Mailout> Mailouts
		{
			get
			{
				return this._Mailouts;
			}
			set
			{
				this._Mailouts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_ServiceSubscriptions(ServiceSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_ServiceSubscriptions(ServiceSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
		
		private void attach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Partner = this;
		}
		
		private void detach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Partner = null;
		}
	}
}
#pragma warning restore 1591
