#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

namespace Inzone.MailService.Main
{

    [System.Data.Linq.Mapping.DatabaseAttribute(Name = "InzoneMirror")]
    public partial class DataLayerDataContext : System.Data.Linq.DataContext
    {

        private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();

        #region Extensibility Method Definitions
        partial void OnCreated();
        partial void InsertParticipant(Participant instance);
        partial void UpdateParticipant(Participant instance);
        partial void DeleteParticipant(Participant instance);
        partial void InsertMailout(Mailout instance);
        partial void UpdateMailout(Mailout instance);
        partial void DeleteMailout(Mailout instance);
        partial void InsertInteraction(Interaction instance);
        partial void UpdateInteraction(Interaction instance);
        partial void DeleteInteraction(Interaction instance);
        partial void InsertCustomer(Customer instance);
        partial void UpdateCustomer(Customer instance);
        partial void DeleteCustomer(Customer instance);
        #endregion

        public DataLayerDataContext() :
            base(global::System.Configuration.ConfigurationManager.ConnectionStrings["InzoneMirrorConnectionString"].ConnectionString, mappingSource)
        {
            OnCreated();
        }

        public DataLayerDataContext(string connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataLayerDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataLayerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public DataLayerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) :
            base(connection, mappingSource)
        {
            OnCreated();
        }

        public System.Data.Linq.Table<Participant> Participants
        {
            get
            {
                return this.GetTable<Participant>();
            }
        }

        public System.Data.Linq.Table<Mailout> Mailouts
        {
            get
            {
                return this.GetTable<Mailout>();
            }
        }

        public System.Data.Linq.Table<Interaction> Interactions
        {
            get
            {
                return this.GetTable<Interaction>();
            }
        }

        public System.Data.Linq.Table<Customer> Customers
        {
            get
            {
                return this.GetTable<Customer>();
            }
        }
    }

    [Table(Name = "dbo.Participants")]
    public partial class Participant : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Firstname;

        private string _Lastname;

        private string _Email;

        private string _Address1;

        private string _Address2;

        private string _Suburb;

        private string _Town;

        private string _Association;

        private System.Nullable<int> _Age;

        private string _Gender;

        private string _ContactPhone;

        private string _RegistrationCode;

        private bool _LoggedIn;

        private System.Nullable<bool> _KnowsCareer;

        private System.Nullable<int> _LastCustomerID;

        private System.Nullable<bool> _Info;

        private System.Nullable<bool> _Sync;

        private System.Nullable<System.DateTime> _LastSync;

        private System.Nullable<System.DateTime> _DOB;

        private System.Nullable<int> _EventID;

        private EntitySet<Mailout> _Mailouts;

        private EntitySet<Interaction> _Interactions;

        private EntityRef<Customer> _Customer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnFirstnameChanging(string value);
        partial void OnFirstnameChanged();
        partial void OnLastnameChanging(string value);
        partial void OnLastnameChanged();
        partial void OnEmailChanging(string value);
        partial void OnEmailChanged();
        partial void OnAddress1Changing(string value);
        partial void OnAddress1Changed();
        partial void OnAddress2Changing(string value);
        partial void OnAddress2Changed();
        partial void OnSuburbChanging(string value);
        partial void OnSuburbChanged();
        partial void OnTownChanging(string value);
        partial void OnTownChanged();
        partial void OnAssociationChanging(string value);
        partial void OnAssociationChanged();
        partial void OnAgeChanging(System.Nullable<int> value);
        partial void OnAgeChanged();
        partial void OnGenderChanging(string value);
        partial void OnGenderChanged();
        partial void OnContactPhoneChanging(string value);
        partial void OnContactPhoneChanged();
        partial void OnRegistrationCodeChanging(string value);
        partial void OnRegistrationCodeChanged();
        partial void OnLoggedInChanging(bool value);
        partial void OnLoggedInChanged();
        partial void OnKnowsCareerChanging(System.Nullable<bool> value);
        partial void OnKnowsCareerChanged();
        partial void OnLastCustomerIDChanging(System.Nullable<int> value);
        partial void OnLastCustomerIDChanged();
        partial void OnInfoChanging(System.Nullable<bool> value);
        partial void OnInfoChanged();
        partial void OnSyncChanging(System.Nullable<bool> value);
        partial void OnSyncChanged();
        partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
        partial void OnLastSyncChanged();
        partial void OnDOBChanging(System.Nullable<System.DateTime> value);
        partial void OnDOBChanged();
        partial void OnEventIDChanging(System.Nullable<int> value);
        partial void OnEventIDChanged();
        #endregion

        public Participant()
        {
            this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
            this._Interactions = new EntitySet<Interaction>(new Action<Interaction>(this.attach_Interactions), new Action<Interaction>(this.detach_Interactions));
            this._Customer = default(EntityRef<Customer>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Firstname", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Firstname
        {
            get
            {
                return this._Firstname;
            }
            set
            {
                if ((this._Firstname != value))
                {
                    this.OnFirstnameChanging(value);
                    this.SendPropertyChanging();
                    this._Firstname = value;
                    this.SendPropertyChanged("Firstname");
                    this.OnFirstnameChanged();
                }
            }
        }

        [Column(Storage = "_Lastname", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Lastname
        {
            get
            {
                return this._Lastname;
            }
            set
            {
                if ((this._Lastname != value))
                {
                    this.OnLastnameChanging(value);
                    this.SendPropertyChanging();
                    this._Lastname = value;
                    this.SendPropertyChanged("Lastname");
                    this.OnLastnameChanged();
                }
            }
        }

        [Column(Storage = "_Email", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if ((this._Email != value))
                {
                    this.OnEmailChanging(value);
                    this.SendPropertyChanging();
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

        [Column(Storage = "_Address1", DbType = "NVarChar(250) NOT NULL", CanBeNull = false)]
        public string Address1
        {
            get
            {
                return this._Address1;
            }
            set
            {
                if ((this._Address1 != value))
                {
                    this.OnAddress1Changing(value);
                    this.SendPropertyChanging();
                    this._Address1 = value;
                    this.SendPropertyChanged("Address1");
                    this.OnAddress1Changed();
                }
            }
        }

        [Column(Storage = "_Address2", DbType = "NVarChar(250)")]
        public string Address2
        {
            get
            {
                return this._Address2;
            }
            set
            {
                if ((this._Address2 != value))
                {
                    this.OnAddress2Changing(value);
                    this.SendPropertyChanging();
                    this._Address2 = value;
                    this.SendPropertyChanged("Address2");
                    this.OnAddress2Changed();
                }
            }
        }

        [Column(Storage = "_Suburb", DbType = "NVarChar(50)")]
        public string Suburb
        {
            get
            {
                return this._Suburb;
            }
            set
            {
                if ((this._Suburb != value))
                {
                    this.OnSuburbChanging(value);
                    this.SendPropertyChanging();
                    this._Suburb = value;
                    this.SendPropertyChanged("Suburb");
                    this.OnSuburbChanged();
                }
            }
        }

        [Column(Storage = "_Town", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Town
        {
            get
            {
                return this._Town;
            }
            set
            {
                if ((this._Town != value))
                {
                    this.OnTownChanging(value);
                    this.SendPropertyChanging();
                    this._Town = value;
                    this.SendPropertyChanged("Town");
                    this.OnTownChanged();
                }
            }
        }

        [Column(Storage = "_Association", DbType = "NVarChar(50)")]
        public string Association
        {
            get
            {
                return this._Association;
            }
            set
            {
                if ((this._Association != value))
                {
                    this.OnAssociationChanging(value);
                    this.SendPropertyChanging();
                    this._Association = value;
                    this.SendPropertyChanged("Association");
                    this.OnAssociationChanged();
                }
            }
        }

        [Column(Storage = "_Age", DbType = "Int")]
        public System.Nullable<int> Age
        {
            get
            {
                return this._Age;
            }
            set
            {
                if ((this._Age != value))
                {
                    this.OnAgeChanging(value);
                    this.SendPropertyChanging();
                    this._Age = value;
                    this.SendPropertyChanged("Age");
                    this.OnAgeChanged();
                }
            }
        }

        [Column(Storage = "_Gender", DbType = "NVarChar(10)")]
        public string Gender
        {
            get
            {
                return this._Gender;
            }
            set
            {
                if ((this._Gender != value))
                {
                    this.OnGenderChanging(value);
                    this.SendPropertyChanging();
                    this._Gender = value;
                    this.SendPropertyChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }

        [Column(Storage = "_ContactPhone", DbType = "NVarChar(15)")]
        public string ContactPhone
        {
            get
            {
                return this._ContactPhone;
            }
            set
            {
                if ((this._ContactPhone != value))
                {
                    this.OnContactPhoneChanging(value);
                    this.SendPropertyChanging();
                    this._ContactPhone = value;
                    this.SendPropertyChanged("ContactPhone");
                    this.OnContactPhoneChanged();
                }
            }
        }

        [Column(Storage = "_RegistrationCode", DbType = "VarChar(20)")]
        public string RegistrationCode
        {
            get
            {
                return this._RegistrationCode;
            }
            set
            {
                if ((this._RegistrationCode != value))
                {
                    this.OnRegistrationCodeChanging(value);
                    this.SendPropertyChanging();
                    this._RegistrationCode = value;
                    this.SendPropertyChanged("RegistrationCode");
                    this.OnRegistrationCodeChanged();
                }
            }
        }

        [Column(Storage = "_LoggedIn", DbType = "Bit NOT NULL")]
        public bool LoggedIn
        {
            get
            {
                return this._LoggedIn;
            }
            set
            {
                if ((this._LoggedIn != value))
                {
                    this.OnLoggedInChanging(value);
                    this.SendPropertyChanging();
                    this._LoggedIn = value;
                    this.SendPropertyChanged("LoggedIn");
                    this.OnLoggedInChanged();
                }
            }
        }

        [Column(Storage = "_KnowsCareer", DbType = "Bit")]
        public System.Nullable<bool> KnowsCareer
        {
            get
            {
                return this._KnowsCareer;
            }
            set
            {
                if ((this._KnowsCareer != value))
                {
                    this.OnKnowsCareerChanging(value);
                    this.SendPropertyChanging();
                    this._KnowsCareer = value;
                    this.SendPropertyChanged("KnowsCareer");
                    this.OnKnowsCareerChanged();
                }
            }
        }

        [Column(Storage = "_LastCustomerID", DbType = "Int")]
        public System.Nullable<int> LastCustomerID
        {
            get
            {
                return this._LastCustomerID;
            }
            set
            {
                if ((this._LastCustomerID != value))
                {
                    if (this._Customer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnLastCustomerIDChanging(value);
                    this.SendPropertyChanging();
                    this._LastCustomerID = value;
                    this.SendPropertyChanged("LastCustomerID");
                    this.OnLastCustomerIDChanged();
                }
            }
        }

        [Column(Storage = "_Info", DbType = "Bit")]
        public System.Nullable<bool> Info
        {
            get
            {
                return this._Info;
            }
            set
            {
                if ((this._Info != value))
                {
                    this.OnInfoChanging(value);
                    this.SendPropertyChanging();
                    this._Info = value;
                    this.SendPropertyChanged("Info");
                    this.OnInfoChanged();
                }
            }
        }

        [Column(Storage = "_Sync", DbType = "Bit")]
        public System.Nullable<bool> Sync
        {
            get
            {
                return this._Sync;
            }
            set
            {
                if ((this._Sync != value))
                {
                    this.OnSyncChanging(value);
                    this.SendPropertyChanging();
                    this._Sync = value;
                    this.SendPropertyChanged("Sync");
                    this.OnSyncChanged();
                }
            }
        }

        [Column(Storage = "_LastSync", DbType = "SmallDateTime")]
        public System.Nullable<System.DateTime> LastSync
        {
            get
            {
                return this._LastSync;
            }
            set
            {
                if ((this._LastSync != value))
                {
                    this.OnLastSyncChanging(value);
                    this.SendPropertyChanging();
                    this._LastSync = value;
                    this.SendPropertyChanged("LastSync");
                    this.OnLastSyncChanged();
                }
            }
        }

        [Column(Storage = "_DOB", DbType = "SmallDateTime")]
        public System.Nullable<System.DateTime> DOB
        {
            get
            {
                return this._DOB;
            }
            set
            {
                if ((this._DOB != value))
                {
                    this.OnDOBChanging(value);
                    this.SendPropertyChanging();
                    this._DOB = value;
                    this.SendPropertyChanged("DOB");
                    this.OnDOBChanged();
                }
            }
        }

        [Column(Storage = "_EventID", DbType = "Int")]
        public System.Nullable<int> EventID
        {
            get
            {
                return this._EventID;
            }
            set
            {
                if ((this._EventID != value))
                {
                    this.OnEventIDChanging(value);
                    this.SendPropertyChanging();
                    this._EventID = value;
                    this.SendPropertyChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }

        [Association(Name = "Participant_Mailout", Storage = "_Mailouts", ThisKey = "ID", OtherKey = "ParticipantID")]
        public EntitySet<Mailout> Mailouts
        {
            get
            {
                return this._Mailouts;
            }
            set
            {
                this._Mailouts.Assign(value);
            }
        }

        [Association(Name = "Participant_Interaction", Storage = "_Interactions", ThisKey = "ID", OtherKey = "ParticipantID")]
        public EntitySet<Interaction> Interactions
        {
            get
            {
                return this._Interactions;
            }
            set
            {
                this._Interactions.Assign(value);
            }
        }

        [Association(Name = "Customer_Participant", Storage = "_Customer", ThisKey = "LastCustomerID", OtherKey = "ID", IsForeignKey = true)]
        public Customer Customer
        {
            get
            {
                return this._Customer.Entity;
            }
            set
            {
                Customer previousValue = this._Customer.Entity;
                if (((previousValue != value)
                            || (this._Customer.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Customer.Entity = null;
                        previousValue.Participants.Remove(this);
                    }
                    this._Customer.Entity = value;
                    if ((value != null))
                    {
                        value.Participants.Add(this);
                        this._LastCustomerID = value.ID;
                    }
                    else
                    {
                        this._LastCustomerID = default(Nullable<int>);
                    }
                    this.SendPropertyChanged("Customer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Mailouts(Mailout entity)
        {
            this.SendPropertyChanging();
            entity.Participant = this;
        }

        private void detach_Mailouts(Mailout entity)
        {
            this.SendPropertyChanging();
            entity.Participant = null;
        }

        private void attach_Interactions(Interaction entity)
        {
            this.SendPropertyChanging();
            entity.Participant = this;
        }

        private void detach_Interactions(Interaction entity)
        {
            this.SendPropertyChanging();
            entity.Participant = null;
        }
    }

    [Table(Name = "dbo.Mailouts")]
    public partial class Mailout : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ParticipantID;

        private int _CustomerID;

        private int _InteractionUsedID;

        private int _ServiceID;

        private System.Nullable<System.DateTime> _DateSent;

        private System.Nullable<System.DateTime> _DateResponded;

        private EntityRef<Participant> _Participant;

        private EntityRef<Interaction> _Interaction;

        private EntityRef<Customer> _Customer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnParticipantIDChanging(int value);
        partial void OnParticipantIDChanged();
        partial void OnCustomerIDChanging(int value);
        partial void OnCustomerIDChanged();
        partial void OnInteractionUsedIDChanging(int value);
        partial void OnInteractionUsedIDChanged();
        partial void OnServiceIDChanging(int value);
        partial void OnServiceIDChanged();
        partial void OnDateSentChanging(System.Nullable<System.DateTime> value);
        partial void OnDateSentChanged();
        partial void OnDateRespondedChanging(System.Nullable<System.DateTime> value);
        partial void OnDateRespondedChanged();
        #endregion

        public Mailout()
        {
            this._Participant = default(EntityRef<Participant>);
            this._Interaction = default(EntityRef<Interaction>);
            this._Customer = default(EntityRef<Customer>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_ParticipantID", DbType = "Int NOT NULL")]
        public int ParticipantID
        {
            get
            {
                return this._ParticipantID;
            }
            set
            {
                if ((this._ParticipantID != value))
                {
                    if (this._Participant.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnParticipantIDChanging(value);
                    this.SendPropertyChanging();
                    this._ParticipantID = value;
                    this.SendPropertyChanged("ParticipantID");
                    this.OnParticipantIDChanged();
                }
            }
        }

        [Column(Storage = "_CustomerID", DbType = "Int NOT NULL")]
        public int CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if ((this._CustomerID != value))
                {
                    if (this._Customer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

        [Column(Storage = "_InteractionUsedID", DbType = "Int NOT NULL")]
        public int InteractionUsedID
        {
            get
            {
                return this._InteractionUsedID;
            }
            set
            {
                if ((this._InteractionUsedID != value))
                {
                    if (this._Interaction.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnInteractionUsedIDChanging(value);
                    this.SendPropertyChanging();
                    this._InteractionUsedID = value;
                    this.SendPropertyChanged("InteractionUsedID");
                    this.OnInteractionUsedIDChanged();
                }
            }
        }

        [Column(Storage = "_ServiceID", DbType = "Int NOT NULL")]
        public int ServiceID
        {
            get
            {
                return this._ServiceID;
            }
            set
            {
                if ((this._ServiceID != value))
                {
                    this.OnServiceIDChanging(value);
                    this.SendPropertyChanging();
                    this._ServiceID = value;
                    this.SendPropertyChanged("ServiceID");
                    this.OnServiceIDChanged();
                }
            }
        }

        [Column(Storage = "_DateSent", DbType = "DateTime")]
        public System.Nullable<System.DateTime> DateSent
        {
            get
            {
                return this._DateSent;
            }
            set
            {
                if ((this._DateSent != value))
                {
                    this.OnDateSentChanging(value);
                    this.SendPropertyChanging();
                    this._DateSent = value;
                    this.SendPropertyChanged("DateSent");
                    this.OnDateSentChanged();
                }
            }
        }

        [Column(Storage = "_DateResponded", DbType = "DateTime")]
        public System.Nullable<System.DateTime> DateResponded
        {
            get
            {
                return this._DateResponded;
            }
            set
            {
                if ((this._DateResponded != value))
                {
                    this.OnDateRespondedChanging(value);
                    this.SendPropertyChanging();
                    this._DateResponded = value;
                    this.SendPropertyChanged("DateResponded");
                    this.OnDateRespondedChanged();
                }
            }
        }

        [Association(Name = "Participant_Mailout", Storage = "_Participant", ThisKey = "ParticipantID", OtherKey = "ID", IsForeignKey = true)]
        public Participant Participant
        {
            get
            {
                return this._Participant.Entity;
            }
            set
            {
                Participant previousValue = this._Participant.Entity;
                if (((previousValue != value)
                            || (this._Participant.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Participant.Entity = null;
                        previousValue.Mailouts.Remove(this);
                    }
                    this._Participant.Entity = value;
                    if ((value != null))
                    {
                        value.Mailouts.Add(this);
                        this._ParticipantID = value.ID;
                    }
                    else
                    {
                        this._ParticipantID = default(int);
                    }
                    this.SendPropertyChanged("Participant");
                }
            }
        }

        [Association(Name = "Interaction_Mailout", Storage = "_Interaction", ThisKey = "InteractionUsedID", OtherKey = "ID", IsForeignKey = true)]
        public Interaction Interaction
        {
            get
            {
                return this._Interaction.Entity;
            }
            set
            {
                Interaction previousValue = this._Interaction.Entity;
                if (((previousValue != value)
                            || (this._Interaction.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Interaction.Entity = null;
                        previousValue.Mailouts.Remove(this);
                    }
                    this._Interaction.Entity = value;
                    if ((value != null))
                    {
                        value.Mailouts.Add(this);
                        this._InteractionUsedID = value.ID;
                    }
                    else
                    {
                        this._InteractionUsedID = default(int);
                    }
                    this.SendPropertyChanged("Interaction");
                }
            }
        }

        [Association(Name = "Customer_Mailout", Storage = "_Customer", ThisKey = "CustomerID", OtherKey = "ID", IsForeignKey = true)]
        public Customer Customer
        {
            get
            {
                return this._Customer.Entity;
            }
            set
            {
                Customer previousValue = this._Customer.Entity;
                if (((previousValue != value)
                            || (this._Customer.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Customer.Entity = null;
                        previousValue.Mailouts.Remove(this);
                    }
                    this._Customer.Entity = value;
                    if ((value != null))
                    {
                        value.Mailouts.Add(this);
                        this._CustomerID = value.ID;
                    }
                    else
                    {
                        this._CustomerID = default(int);
                    }
                    this.SendPropertyChanged("Customer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [Table(Name = "dbo.Interactions")]
    public partial class Interaction : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private int _ParticipantID;

        private int _EventID;

        private int _CustomerID;

        private System.DateTime _DateTime;

        private System.Nullable<bool> _Sync;

        private System.Nullable<System.DateTime> _LastSync;

        private System.Nullable<bool> _Subscribed;

        private EntitySet<Mailout> _Mailouts;

        private EntityRef<Participant> _Participant;

        private EntityRef<Customer> _Customer;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnParticipantIDChanging(int value);
        partial void OnParticipantIDChanged();
        partial void OnEventIDChanging(int value);
        partial void OnEventIDChanged();
        partial void OnCustomerIDChanging(int value);
        partial void OnCustomerIDChanged();
        partial void OnDateTimeChanging(System.DateTime value);
        partial void OnDateTimeChanged();
        partial void OnSyncChanging(System.Nullable<bool> value);
        partial void OnSyncChanged();
        partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
        partial void OnLastSyncChanged();
        partial void OnSubscribedChanging(System.Nullable<bool> value);
        partial void OnSubscribedChanged();
        #endregion

        public Interaction()
        {
            this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
            this._Participant = default(EntityRef<Participant>);
            this._Customer = default(EntityRef<Customer>);
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_ParticipantID", DbType = "Int NOT NULL")]
        public int ParticipantID
        {
            get
            {
                return this._ParticipantID;
            }
            set
            {
                if ((this._ParticipantID != value))
                {
                    if (this._Participant.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnParticipantIDChanging(value);
                    this.SendPropertyChanging();
                    this._ParticipantID = value;
                    this.SendPropertyChanged("ParticipantID");
                    this.OnParticipantIDChanged();
                }
            }
        }

        [Column(Storage = "_EventID", DbType = "Int NOT NULL")]
        public int EventID
        {
            get
            {
                return this._EventID;
            }
            set
            {
                if ((this._EventID != value))
                {
                    this.OnEventIDChanging(value);
                    this.SendPropertyChanging();
                    this._EventID = value;
                    this.SendPropertyChanged("EventID");
                    this.OnEventIDChanged();
                }
            }
        }

        [Column(Storage = "_CustomerID", DbType = "Int NOT NULL")]
        public int CustomerID
        {
            get
            {
                return this._CustomerID;
            }
            set
            {
                if ((this._CustomerID != value))
                {
                    if (this._Customer.HasLoadedOrAssignedValue)
                    {
                        throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
                    }
                    this.OnCustomerIDChanging(value);
                    this.SendPropertyChanging();
                    this._CustomerID = value;
                    this.SendPropertyChanged("CustomerID");
                    this.OnCustomerIDChanged();
                }
            }
        }

        [Column(Storage = "_DateTime", DbType = "DateTime NOT NULL")]
        public System.DateTime DateTime
        {
            get
            {
                return this._DateTime;
            }
            set
            {
                if ((this._DateTime != value))
                {
                    this.OnDateTimeChanging(value);
                    this.SendPropertyChanging();
                    this._DateTime = value;
                    this.SendPropertyChanged("DateTime");
                    this.OnDateTimeChanged();
                }
            }
        }

        [Column(Storage = "_Sync", DbType = "Bit")]
        public System.Nullable<bool> Sync
        {
            get
            {
                return this._Sync;
            }
            set
            {
                if ((this._Sync != value))
                {
                    this.OnSyncChanging(value);
                    this.SendPropertyChanging();
                    this._Sync = value;
                    this.SendPropertyChanged("Sync");
                    this.OnSyncChanged();
                }
            }
        }

        [Column(Storage = "_LastSync", DbType = "SmallDateTime")]
        public System.Nullable<System.DateTime> LastSync
        {
            get
            {
                return this._LastSync;
            }
            set
            {
                if ((this._LastSync != value))
                {
                    this.OnLastSyncChanging(value);
                    this.SendPropertyChanging();
                    this._LastSync = value;
                    this.SendPropertyChanged("LastSync");
                    this.OnLastSyncChanged();
                }
            }
        }

        [Column(Storage = "_Subscribed", DbType = "Bit")]
        public System.Nullable<bool> Subscribed
        {
            get
            {
                return this._Subscribed;
            }
            set
            {
                if ((this._Subscribed != value))
                {
                    this.OnSubscribedChanging(value);
                    this.SendPropertyChanging();
                    this._Subscribed = value;
                    this.SendPropertyChanged("Subscribed");
                    this.OnSubscribedChanged();
                }
            }
        }

        [Association(Name = "Interaction_Mailout", Storage = "_Mailouts", ThisKey = "ID", OtherKey = "InteractionUsedID")]
        public EntitySet<Mailout> Mailouts
        {
            get
            {
                return this._Mailouts;
            }
            set
            {
                this._Mailouts.Assign(value);
            }
        }

        [Association(Name = "Participant_Interaction", Storage = "_Participant", ThisKey = "ParticipantID", OtherKey = "ID", IsForeignKey = true, DeleteOnNull = true, DeleteRule = "CASCADE")]
        public Participant Participant
        {
            get
            {
                return this._Participant.Entity;
            }
            set
            {
                Participant previousValue = this._Participant.Entity;
                if (((previousValue != value)
                            || (this._Participant.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Participant.Entity = null;
                        previousValue.Interactions.Remove(this);
                    }
                    this._Participant.Entity = value;
                    if ((value != null))
                    {
                        value.Interactions.Add(this);
                        this._ParticipantID = value.ID;
                    }
                    else
                    {
                        this._ParticipantID = default(int);
                    }
                    this.SendPropertyChanged("Participant");
                }
            }
        }

        [Association(Name = "Customer_Interaction", Storage = "_Customer", ThisKey = "CustomerID", OtherKey = "ID", IsForeignKey = true)]
        public Customer Customer
        {
            get
            {
                return this._Customer.Entity;
            }
            set
            {
                Customer previousValue = this._Customer.Entity;
                if (((previousValue != value)
                            || (this._Customer.HasLoadedOrAssignedValue == false)))
                {
                    this.SendPropertyChanging();
                    if ((previousValue != null))
                    {
                        this._Customer.Entity = null;
                        previousValue.Interactions.Remove(this);
                    }
                    this._Customer.Entity = value;
                    if ((value != null))
                    {
                        value.Interactions.Add(this);
                        this._CustomerID = value.ID;
                    }
                    else
                    {
                        this._CustomerID = default(int);
                    }
                    this.SendPropertyChanged("Customer");
                }
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Mailouts(Mailout entity)
        {
            this.SendPropertyChanging();
            entity.Interaction = this;
        }

        private void detach_Mailouts(Mailout entity)
        {
            this.SendPropertyChanging();
            entity.Interaction = null;
        }
    }

    [Table(Name = "dbo.Customers")]
    public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);

        private int _ID;

        private string _Name;

        private System.Nullable<bool> _Sync;

        private System.Nullable<System.DateTime> _LastSync;

        private string _LogoURL;

        private string _WebsiteURL;

        private string _DisplayName;

        private EntitySet<Participant> _Participants;

        private EntitySet<Mailout> _Mailouts;

        private EntitySet<Interaction> _Interactions;

        #region Extensibility Method Definitions
        partial void OnLoaded();
        partial void OnValidate(System.Data.Linq.ChangeAction action);
        partial void OnCreated();
        partial void OnIDChanging(int value);
        partial void OnIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnSyncChanging(System.Nullable<bool> value);
        partial void OnSyncChanged();
        partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
        partial void OnLastSyncChanged();
        partial void OnLogoURLChanging(string value);
        partial void OnLogoURLChanged();
        partial void OnWebsiteURLChanging(string value);
        partial void OnWebsiteURLChanged();
        partial void OnDisplayNameChanging(string value);
        partial void OnDisplayNameChanged();
        #endregion

        public Customer()
        {
            this._Participants = new EntitySet<Participant>(new Action<Participant>(this.attach_Participants), new Action<Participant>(this.detach_Participants));
            this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
            this._Interactions = new EntitySet<Interaction>(new Action<Interaction>(this.attach_Interactions), new Action<Interaction>(this.detach_Interactions));
            OnCreated();
        }

        [Column(Storage = "_ID", AutoSync = AutoSync.OnInsert, DbType = "Int NOT NULL IDENTITY", IsPrimaryKey = true, IsDbGenerated = true)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this.OnIDChanging(value);
                    this.SendPropertyChanging();
                    this._ID = value;
                    this.SendPropertyChanged("ID");
                    this.OnIDChanged();
                }
            }
        }

        [Column(Storage = "_Name", DbType = "NVarChar(50) NOT NULL", CanBeNull = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging();
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        [Column(Storage = "_Sync", DbType = "Bit")]
        public System.Nullable<bool> Sync
        {
            get
            {
                return this._Sync;
            }
            set
            {
                if ((this._Sync != value))
                {
                    this.OnSyncChanging(value);
                    this.SendPropertyChanging();
                    this._Sync = value;
                    this.SendPropertyChanged("Sync");
                    this.OnSyncChanged();
                }
            }
        }

        [Column(Storage = "_LastSync", DbType = "SmallDateTime")]
        public System.Nullable<System.DateTime> LastSync
        {
            get
            {
                return this._LastSync;
            }
            set
            {
                if ((this._LastSync != value))
                {
                    this.OnLastSyncChanging(value);
                    this.SendPropertyChanging();
                    this._LastSync = value;
                    this.SendPropertyChanged("LastSync");
                    this.OnLastSyncChanged();
                }
            }
        }

        [Column(Storage = "_LogoURL", DbType = "VarChar(255)")]
        public string LogoURL
        {
            get
            {
                return this._LogoURL;
            }
            set
            {
                if ((this._LogoURL != value))
                {
                    this.OnLogoURLChanging(value);
                    this.SendPropertyChanging();
                    this._LogoURL = value;
                    this.SendPropertyChanged("LogoURL");
                    this.OnLogoURLChanged();
                }
            }
        }

        [Column(Storage = "_WebsiteURL", DbType = "VarChar(255)")]
        public string WebsiteURL
        {
            get
            {
                return this._WebsiteURL;
            }
            set
            {
                if ((this._WebsiteURL != value))
                {
                    this.OnWebsiteURLChanging(value);
                    this.SendPropertyChanging();
                    this._WebsiteURL = value;
                    this.SendPropertyChanged("WebsiteURL");
                    this.OnWebsiteURLChanged();
                }
            }
        }

        [Column(Storage = "_DisplayName", DbType = "VarChar(50)")]
        public string DisplayName
        {
            get
            {
                return this._DisplayName;
            }
            set
            {
                if ((this._DisplayName != value))
                {
                    this.OnDisplayNameChanging(value);
                    this.SendPropertyChanging();
                    this._DisplayName = value;
                    this.SendPropertyChanged("DisplayName");
                    this.OnDisplayNameChanged();
                }
            }
        }

        [Association(Name = "Customer_Participant", Storage = "_Participants", ThisKey = "ID", OtherKey = "LastCustomerID")]
        public EntitySet<Participant> Participants
        {
            get
            {
                return this._Participants;
            }
            set
            {
                this._Participants.Assign(value);
            }
        }

        [Association(Name = "Customer_Mailout", Storage = "_Mailouts", ThisKey = "ID", OtherKey = "CustomerID")]
        public EntitySet<Mailout> Mailouts
        {
            get
            {
                return this._Mailouts;
            }
            set
            {
                this._Mailouts.Assign(value);
            }
        }

        [Association(Name = "Customer_Interaction", Storage = "_Interactions", ThisKey = "ID", OtherKey = "CustomerID")]
        public EntitySet<Interaction> Interactions
        {
            get
            {
                return this._Interactions;
            }
            set
            {
                this._Interactions.Assign(value);
            }
        }

        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            if ((this.PropertyChanging != null))
            {
                this.PropertyChanging(this, emptyChangingEventArgs);
            }
        }

        protected virtual void SendPropertyChanged(String propertyName)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }

        private void attach_Participants(Participant entity)
        {
            this.SendPropertyChanging();
            entity.Customer = this;
        }

        private void detach_Participants(Participant entity)
        {
            this.SendPropertyChanging();
            entity.Customer = null;
        }

        private void attach_Mailouts(Mailout entity)
        {
            this.SendPropertyChanging();
            entity.Customer = this;
        }

        private void detach_Mailouts(Mailout entity)
        {
            this.SendPropertyChanging();
            entity.Customer = null;
        }

        private void attach_Interactions(Interaction entity)
        {
            this.SendPropertyChanging();
            entity.Customer = this;
        }

        private void detach_Interactions(Interaction entity)
        {
            this.SendPropertyChanging();
            entity.Customer = null;
        }
    }
}
#pragma warning restore 1591
