#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InZone
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="InzoneMirror")]
	public partial class InZoneDAL : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertAccessMapping(AccessMapping instance);
    partial void UpdateAccessMapping(AccessMapping instance);
    partial void DeleteAccessMapping(AccessMapping instance);
    partial void InsertAccessRight(AccessRight instance);
    partial void UpdateAccessRight(AccessRight instance);
    partial void DeleteAccessRight(AccessRight instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertEvent(Event instance);
    partial void UpdateEvent(Event instance);
    partial void DeleteEvent(Event instance);
    partial void InsertInteraction(Interaction instance);
    partial void UpdateInteraction(Interaction instance);
    partial void DeleteInteraction(Interaction instance);
    partial void InsertInteractionVideo(InteractionVideo instance);
    partial void UpdateInteractionVideo(InteractionVideo instance);
    partial void DeleteInteractionVideo(InteractionVideo instance);
    partial void InsertMailoutException(MailoutException instance);
    partial void UpdateMailoutException(MailoutException instance);
    partial void DeleteMailoutException(MailoutException instance);
    partial void InsertMailout(Mailout instance);
    partial void UpdateMailout(Mailout instance);
    partial void DeleteMailout(Mailout instance);
    partial void InsertParticipant(Participant instance);
    partial void UpdateParticipant(Participant instance);
    partial void DeleteParticipant(Participant instance);
    partial void InsertService(Service instance);
    partial void UpdateService(Service instance);
    partial void DeleteService(Service instance);
    partial void InsertServiceSubscription(ServiceSubscription instance);
    partial void UpdateServiceSubscription(ServiceSubscription instance);
    partial void DeleteServiceSubscription(ServiceSubscription instance);
    partial void InsertSubscribedLog(SubscribedLog instance);
    partial void UpdateSubscribedLog(SubscribedLog instance);
    partial void DeleteSubscribedLog(SubscribedLog instance);
    partial void InsertSyncError(SyncError instance);
    partial void UpdateSyncError(SyncError instance);
    partial void DeleteSyncError(SyncError instance);
    partial void InsertSyncLog(SyncLog instance);
    partial void UpdateSyncLog(SyncLog instance);
    partial void DeleteSyncLog(SyncLog instance);
    #endregion
		
		public InZoneDAL() : 
				base(global::InZoneMailService.Properties.Settings.Default.InzoneMirrorConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InZoneDAL(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InZoneDAL(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InZoneDAL(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InZoneDAL(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<AccessMapping> AccessMappings
		{
			get
			{
				return this.GetTable<AccessMapping>();
			}
		}
		
		public System.Data.Linq.Table<AccessRight> AccessRights
		{
			get
			{
				return this.GetTable<AccessRight>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Event> Events
		{
			get
			{
				return this.GetTable<Event>();
			}
		}
		
		public System.Data.Linq.Table<Interaction> Interactions
		{
			get
			{
				return this.GetTable<Interaction>();
			}
		}
		
		public System.Data.Linq.Table<InteractionVideo> InteractionVideos
		{
			get
			{
				return this.GetTable<InteractionVideo>();
			}
		}
		
		public System.Data.Linq.Table<MailoutException> MailoutExceptions
		{
			get
			{
				return this.GetTable<MailoutException>();
			}
		}
		
		public System.Data.Linq.Table<Mailout> Mailouts
		{
			get
			{
				return this.GetTable<Mailout>();
			}
		}
		
		public System.Data.Linq.Table<Participant> Participants
		{
			get
			{
				return this.GetTable<Participant>();
			}
		}
		
		public System.Data.Linq.Table<Service> Services
		{
			get
			{
				return this.GetTable<Service>();
			}
		}
		
		public System.Data.Linq.Table<ServiceSubscription> ServiceSubscriptions
		{
			get
			{
				return this.GetTable<ServiceSubscription>();
			}
		}
		
		public System.Data.Linq.Table<SubscribedLog> SubscribedLogs
		{
			get
			{
				return this.GetTable<SubscribedLog>();
			}
		}
		
		public System.Data.Linq.Table<SyncError> SyncErrors
		{
			get
			{
				return this.GetTable<SyncError>();
			}
		}
		
		public System.Data.Linq.Table<SyncLog> SyncLogs
		{
			get
			{
				return this.GetTable<SyncLog>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Username;
		
		private string _DisplayName;
		
		private string _Email;
		
		private int _Logins;
		
		private System.Nullable<System.DateTime> _LastLogin;
		
		private string _Password;
		
		private System.Nullable<int> _Salt;
		
		private int _CustomerID;
		
		private EntitySet<AccessMapping> _AccessMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnLoginsChanging(int value);
    partial void OnLoginsChanged();
    partial void OnLastLoginChanging(System.Nullable<System.DateTime> value);
    partial void OnLastLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnSaltChanging(System.Nullable<int> value);
    partial void OnSaltChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public User()
		{
			this._AccessMappings = new EntitySet<AccessMapping>(new Action<AccessMapping>(this.attach_AccessMappings), new Action<AccessMapping>(this.detach_AccessMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="NVarChar(100)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logins", DbType="Int NOT NULL")]
		public int Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				if ((this._Logins != value))
				{
					this.OnLoginsChanging(value);
					this.SendPropertyChanging();
					this._Logins = value;
					this.SendPropertyChanged("Logins");
					this.OnLoginsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastLogin", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastLogin
		{
			get
			{
				return this._LastLogin;
			}
			set
			{
				if ((this._LastLogin != value))
				{
					this.OnLastLoginChanging(value);
					this.SendPropertyChanging();
					this._LastLogin = value;
					this.SendPropertyChanged("LastLogin");
					this.OnLastLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="Char(40) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salt", DbType="Int")]
		public System.Nullable<int> Salt
		{
			get
			{
				return this._Salt;
			}
			set
			{
				if ((this._Salt != value))
				{
					this.OnSaltChanging(value);
					this.SendPropertyChanging();
					this._Salt = value;
					this.SendPropertyChanged("Salt");
					this.OnSaltChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccessMapping", Storage="_AccessMappings", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<AccessMapping> AccessMappings
		{
			get
			{
				return this._AccessMappings;
			}
			set
			{
				this._AccessMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessMappings(AccessMapping entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_AccessMappings(AccessMapping entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessMapping")]
	public partial class AccessMapping : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private int _AccessRightID;
		
		private EntityRef<User> _User;
		
		private EntityRef<AccessRight> _AccessRight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnAccessRightIDChanging(int value);
    partial void OnAccessRightIDChanged();
    #endregion
		
		public AccessMapping()
		{
			this._User = default(EntityRef<User>);
			this._AccessRight = default(EntityRef<AccessRight>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessRightID", DbType="Int NOT NULL")]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					if (this._AccessRight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessRightIDChanging(value);
					this.SendPropertyChanging();
					this._AccessRightID = value;
					this.SendPropertyChanged("AccessRightID");
					this.OnAccessRightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_AccessMapping", Storage="_User", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.AccessMappings.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.AccessMappings.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessRight_AccessMapping", Storage="_AccessRight", ThisKey="AccessRightID", OtherKey="ID", IsForeignKey=true)]
		public AccessRight AccessRight
		{
			get
			{
				return this._AccessRight.Entity;
			}
			set
			{
				AccessRight previousValue = this._AccessRight.Entity;
				if (((previousValue != value) 
							|| (this._AccessRight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessRight.Entity = null;
						previousValue.AccessMappings.Remove(this);
					}
					this._AccessRight.Entity = value;
					if ((value != null))
					{
						value.AccessMappings.Add(this);
						this._AccessRightID = value.ID;
					}
					else
					{
						this._AccessRightID = default(int);
					}
					this.SendPropertyChanged("AccessRight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessRights")]
	public partial class AccessRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _AccessRightName;
		
		private EntitySet<AccessMapping> _AccessMappings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccessRightNameChanging(string value);
    partial void OnAccessRightNameChanged();
    #endregion
		
		public AccessRight()
		{
			this._AccessMappings = new EntitySet<AccessMapping>(new Action<AccessMapping>(this.attach_AccessMappings), new Action<AccessMapping>(this.detach_AccessMappings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessRightName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AccessRightName
		{
			get
			{
				return this._AccessRightName;
			}
			set
			{
				if ((this._AccessRightName != value))
				{
					this.OnAccessRightNameChanging(value);
					this.SendPropertyChanging();
					this._AccessRightName = value;
					this.SendPropertyChanged("AccessRightName");
					this.OnAccessRightNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessRight_AccessMapping", Storage="_AccessMappings", ThisKey="ID", OtherKey="AccessRightID")]
		public EntitySet<AccessMapping> AccessMappings
		{
			get
			{
				return this._AccessMappings;
			}
			set
			{
				this._AccessMappings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessMappings(AccessMapping entity)
		{
			this.SendPropertyChanging();
			entity.AccessRight = this;
		}
		
		private void detach_AccessMappings(AccessMapping entity)
		{
			this.SendPropertyChanging();
			entity.AccessRight = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<bool> _Sync;
		
		private System.Nullable<System.DateTime> _LastSync;
		
		private string _LogoURL;
		
		private string _WebsiteURL;
		
		private string _DisplayName;
		
		private EntitySet<Interaction> _Interactions;
		
		private EntitySet<Mailout> _Mailouts;
		
		private EntitySet<ServiceSubscription> _ServiceSubscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSyncChanging(System.Nullable<bool> value);
    partial void OnSyncChanged();
    partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSyncChanged();
    partial void OnLogoURLChanging(string value);
    partial void OnLogoURLChanged();
    partial void OnWebsiteURLChanging(string value);
    partial void OnWebsiteURLChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public Customer()
		{
			this._Interactions = new EntitySet<Interaction>(new Action<Interaction>(this.attach_Interactions), new Action<Interaction>(this.detach_Interactions));
			this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
			this._ServiceSubscriptions = new EntitySet<ServiceSubscription>(new Action<ServiceSubscription>(this.attach_ServiceSubscriptions), new Action<ServiceSubscription>(this.detach_ServiceSubscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sync", DbType="Bit")]
		public System.Nullable<bool> Sync
		{
			get
			{
				return this._Sync;
			}
			set
			{
				if ((this._Sync != value))
				{
					this.OnSyncChanging(value);
					this.SendPropertyChanging();
					this._Sync = value;
					this.SendPropertyChanged("Sync");
					this.OnSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSync", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastSync
		{
			get
			{
				return this._LastSync;
			}
			set
			{
				if ((this._LastSync != value))
				{
					this.OnLastSyncChanging(value);
					this.SendPropertyChanging();
					this._LastSync = value;
					this.SendPropertyChanged("LastSync");
					this.OnLastSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogoURL", DbType="VarChar(255)")]
		public string LogoURL
		{
			get
			{
				return this._LogoURL;
			}
			set
			{
				if ((this._LogoURL != value))
				{
					this.OnLogoURLChanging(value);
					this.SendPropertyChanging();
					this._LogoURL = value;
					this.SendPropertyChanged("LogoURL");
					this.OnLogoURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebsiteURL", DbType="VarChar(255)")]
		public string WebsiteURL
		{
			get
			{
				return this._WebsiteURL;
			}
			set
			{
				if ((this._WebsiteURL != value))
				{
					this.OnWebsiteURLChanging(value);
					this.SendPropertyChanging();
					this._WebsiteURL = value;
					this.SendPropertyChanged("WebsiteURL");
					this.OnWebsiteURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DisplayName", DbType="VarChar(50)")]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Interaction", Storage="_Interactions", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<Interaction> Interactions
		{
			get
			{
				return this._Interactions;
			}
			set
			{
				this._Interactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Mailout", Storage="_Mailouts", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<Mailout> Mailouts
		{
			get
			{
				return this._Mailouts;
			}
			set
			{
				this._Mailouts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_ServiceSubscription", Storage="_ServiceSubscriptions", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<ServiceSubscription> ServiceSubscriptions
		{
			get
			{
				return this._ServiceSubscriptions;
			}
			set
			{
				this._ServiceSubscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_ServiceSubscriptions(ServiceSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_ServiceSubscriptions(ServiceSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Events")]
	public partial class Event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private bool _Current;
		
		private System.Nullable<bool> _Sync;
		
		private System.Nullable<System.DateTime> _LastSync;
		
		private System.Nullable<System.DateTime> _EventDate;
		
		private EntitySet<Participant> _Participants;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCurrentChanging(bool value);
    partial void OnCurrentChanged();
    partial void OnSyncChanging(System.Nullable<bool> value);
    partial void OnSyncChanged();
    partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSyncChanged();
    partial void OnEventDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEventDateChanged();
    #endregion
		
		public Event()
		{
			this._Participants = new EntitySet<Participant>(new Action<Participant>(this.attach_Participants), new Action<Participant>(this.detach_Participants));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Current]", Storage="_Current", DbType="Bit NOT NULL")]
		public bool Current
		{
			get
			{
				return this._Current;
			}
			set
			{
				if ((this._Current != value))
				{
					this.OnCurrentChanging(value);
					this.SendPropertyChanging();
					this._Current = value;
					this.SendPropertyChanged("Current");
					this.OnCurrentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sync", DbType="Bit")]
		public System.Nullable<bool> Sync
		{
			get
			{
				return this._Sync;
			}
			set
			{
				if ((this._Sync != value))
				{
					this.OnSyncChanging(value);
					this.SendPropertyChanging();
					this._Sync = value;
					this.SendPropertyChanged("Sync");
					this.OnSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSync", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastSync
		{
			get
			{
				return this._LastSync;
			}
			set
			{
				if ((this._LastSync != value))
				{
					this.OnLastSyncChanging(value);
					this.SendPropertyChanging();
					this._LastSync = value;
					this.SendPropertyChanged("LastSync");
					this.OnLastSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Participant", Storage="_Participants", ThisKey="ID", OtherKey="EventID")]
		public EntitySet<Participant> Participants
		{
			get
			{
				return this._Participants;
			}
			set
			{
				this._Participants.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Event = this;
		}
		
		private void detach_Participants(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Event = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Interactions")]
	public partial class Interaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ParticipantID;
		
		private int _EventID;
		
		private int _CustomerID;
		
		private System.DateTime _DateTime;
		
		private System.Nullable<bool> _Sync;
		
		private System.Nullable<System.DateTime> _LastSync;
		
		private System.Nullable<bool> _Subscribed;
		
		private EntitySet<Mailout> _Mailouts;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Participant> _Participant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParticipantIDChanging(int value);
    partial void OnParticipantIDChanged();
    partial void OnEventIDChanging(int value);
    partial void OnEventIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnSyncChanging(System.Nullable<bool> value);
    partial void OnSyncChanged();
    partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSyncChanged();
    partial void OnSubscribedChanging(System.Nullable<bool> value);
    partial void OnSubscribedChanged();
    #endregion
		
		public Interaction()
		{
			this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
			this._Customer = default(EntityRef<Customer>);
			this._Participant = default(EntityRef<Participant>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParticipantID", DbType="Int NOT NULL")]
		public int ParticipantID
		{
			get
			{
				return this._ParticipantID;
			}
			set
			{
				if ((this._ParticipantID != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipantIDChanging(value);
					this.SendPropertyChanging();
					this._ParticipantID = value;
					this.SendPropertyChanged("ParticipantID");
					this.OnParticipantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int NOT NULL")]
		public int EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sync", DbType="Bit")]
		public System.Nullable<bool> Sync
		{
			get
			{
				return this._Sync;
			}
			set
			{
				if ((this._Sync != value))
				{
					this.OnSyncChanging(value);
					this.SendPropertyChanging();
					this._Sync = value;
					this.SendPropertyChanged("Sync");
					this.OnSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSync", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastSync
		{
			get
			{
				return this._LastSync;
			}
			set
			{
				if ((this._LastSync != value))
				{
					this.OnLastSyncChanging(value);
					this.SendPropertyChanging();
					this._LastSync = value;
					this.SendPropertyChanged("LastSync");
					this.OnLastSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subscribed", DbType="Bit")]
		public System.Nullable<bool> Subscribed
		{
			get
			{
				return this._Subscribed;
			}
			set
			{
				if ((this._Subscribed != value))
				{
					this.OnSubscribedChanging(value);
					this.SendPropertyChanging();
					this._Subscribed = value;
					this.SendPropertyChanged("Subscribed");
					this.OnSubscribedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Interaction_Mailout", Storage="_Mailouts", ThisKey="ID", OtherKey="InteractionUsedID")]
		public EntitySet<Mailout> Mailouts
		{
			get
			{
				return this._Mailouts;
			}
			set
			{
				this._Mailouts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Interaction", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Interactions.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Interactions.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Interaction", Storage="_Participant", ThisKey="ParticipantID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Participant Participant
		{
			get
			{
				return this._Participant.Entity;
			}
			set
			{
				Participant previousValue = this._Participant.Entity;
				if (((previousValue != value) 
							|| (this._Participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant.Entity = null;
						previousValue.Interactions.Remove(this);
					}
					this._Participant.Entity = value;
					if ((value != null))
					{
						value.Interactions.Add(this);
						this._ParticipantID = value.ID;
					}
					else
					{
						this._ParticipantID = default(int);
					}
					this.SendPropertyChanged("Participant");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Interaction = this;
		}
		
		private void detach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Interaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractionVideo")]
	public partial class InteractionVideo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _InteractionID;
		
		private int _VideoID;
		
		private string _VideoName;
		
		private System.Nullable<bool> _Sync;
		
		private System.Nullable<System.DateTime> _LastSync;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnInteractionIDChanging(int value);
    partial void OnInteractionIDChanged();
    partial void OnVideoIDChanging(int value);
    partial void OnVideoIDChanged();
    partial void OnVideoNameChanging(string value);
    partial void OnVideoNameChanged();
    partial void OnSyncChanging(System.Nullable<bool> value);
    partial void OnSyncChanged();
    partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSyncChanged();
    #endregion
		
		public InteractionVideo()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionID", DbType="Int NOT NULL")]
		public int InteractionID
		{
			get
			{
				return this._InteractionID;
			}
			set
			{
				if ((this._InteractionID != value))
				{
					this.OnInteractionIDChanging(value);
					this.SendPropertyChanging();
					this._InteractionID = value;
					this.SendPropertyChanged("InteractionID");
					this.OnInteractionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoID", DbType="Int NOT NULL")]
		public int VideoID
		{
			get
			{
				return this._VideoID;
			}
			set
			{
				if ((this._VideoID != value))
				{
					this.OnVideoIDChanging(value);
					this.SendPropertyChanging();
					this._VideoID = value;
					this.SendPropertyChanged("VideoID");
					this.OnVideoIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VideoName", DbType="VarChar(30)")]
		public string VideoName
		{
			get
			{
				return this._VideoName;
			}
			set
			{
				if ((this._VideoName != value))
				{
					this.OnVideoNameChanging(value);
					this.SendPropertyChanging();
					this._VideoName = value;
					this.SendPropertyChanged("VideoName");
					this.OnVideoNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sync", DbType="Bit")]
		public System.Nullable<bool> Sync
		{
			get
			{
				return this._Sync;
			}
			set
			{
				if ((this._Sync != value))
				{
					this.OnSyncChanging(value);
					this.SendPropertyChanging();
					this._Sync = value;
					this.SendPropertyChanged("Sync");
					this.OnSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSync", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastSync
		{
			get
			{
				return this._LastSync;
			}
			set
			{
				if ((this._LastSync != value))
				{
					this.OnLastSyncChanging(value);
					this.SendPropertyChanging();
					this._LastSync = value;
					this.SendPropertyChanged("LastSync");
					this.OnLastSyncChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MailoutExceptions")]
	public partial class MailoutException : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MailoutID;
		
		private string _EmailAddress;
		
		private string _ErrorMessage;
		
		private EntityRef<Mailout> _Mailout;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMailoutIDChanging(int value);
    partial void OnMailoutIDChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnErrorMessageChanging(string value);
    partial void OnErrorMessageChanged();
    #endregion
		
		public MailoutException()
		{
			this._Mailout = default(EntityRef<Mailout>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MailoutID", DbType="Int NOT NULL")]
		public int MailoutID
		{
			get
			{
				return this._MailoutID;
			}
			set
			{
				if ((this._MailoutID != value))
				{
					if (this._Mailout.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMailoutIDChanging(value);
					this.SendPropertyChanging();
					this._MailoutID = value;
					this.SendPropertyChanged("MailoutID");
					this.OnMailoutIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ErrorMessage", DbType="VarChar(512) NOT NULL", CanBeNull=false)]
		public string ErrorMessage
		{
			get
			{
				return this._ErrorMessage;
			}
			set
			{
				if ((this._ErrorMessage != value))
				{
					this.OnErrorMessageChanging(value);
					this.SendPropertyChanging();
					this._ErrorMessage = value;
					this.SendPropertyChanged("ErrorMessage");
					this.OnErrorMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mailout_MailoutException", Storage="_Mailout", ThisKey="MailoutID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Mailout Mailout
		{
			get
			{
				return this._Mailout.Entity;
			}
			set
			{
				Mailout previousValue = this._Mailout.Entity;
				if (((previousValue != value) 
							|| (this._Mailout.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Mailout.Entity = null;
						previousValue.MailoutExceptions.Remove(this);
					}
					this._Mailout.Entity = value;
					if ((value != null))
					{
						value.MailoutExceptions.Add(this);
						this._MailoutID = value.ID;
					}
					else
					{
						this._MailoutID = default(int);
					}
					this.SendPropertyChanged("Mailout");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Mailouts")]
	public partial class Mailout : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ParticipantID;
		
		private int _CustomerID;
		
		private int _InteractionUsedID;
		
		private int _ServiceID;
		
		private System.Nullable<System.DateTime> _DateSent;
		
		private System.Nullable<System.DateTime> _DateResponded;
		
		private EntitySet<MailoutException> _MailoutExceptions;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Interaction> _Interaction;
		
		private EntityRef<Participant> _Participant;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParticipantIDChanging(int value);
    partial void OnParticipantIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnInteractionUsedIDChanging(int value);
    partial void OnInteractionUsedIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnDateSentChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSentChanged();
    partial void OnDateRespondedChanging(System.Nullable<System.DateTime> value);
    partial void OnDateRespondedChanged();
    #endregion
		
		public Mailout()
		{
			this._MailoutExceptions = new EntitySet<MailoutException>(new Action<MailoutException>(this.attach_MailoutExceptions), new Action<MailoutException>(this.detach_MailoutExceptions));
			this._Customer = default(EntityRef<Customer>);
			this._Interaction = default(EntityRef<Interaction>);
			this._Participant = default(EntityRef<Participant>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParticipantID", DbType="Int NOT NULL")]
		public int ParticipantID
		{
			get
			{
				return this._ParticipantID;
			}
			set
			{
				if ((this._ParticipantID != value))
				{
					if (this._Participant.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParticipantIDChanging(value);
					this.SendPropertyChanging();
					this._ParticipantID = value;
					this.SendPropertyChanged("ParticipantID");
					this.OnParticipantIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionUsedID", DbType="Int NOT NULL")]
		public int InteractionUsedID
		{
			get
			{
				return this._InteractionUsedID;
			}
			set
			{
				if ((this._InteractionUsedID != value))
				{
					if (this._Interaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionUsedIDChanging(value);
					this.SendPropertyChanging();
					this._InteractionUsedID = value;
					this.SendPropertyChanged("InteractionUsedID");
					this.OnInteractionUsedIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSent", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSent
		{
			get
			{
				return this._DateSent;
			}
			set
			{
				if ((this._DateSent != value))
				{
					this.OnDateSentChanging(value);
					this.SendPropertyChanging();
					this._DateSent = value;
					this.SendPropertyChanged("DateSent");
					this.OnDateSentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateResponded", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateResponded
		{
			get
			{
				return this._DateResponded;
			}
			set
			{
				if ((this._DateResponded != value))
				{
					this.OnDateRespondedChanging(value);
					this.SendPropertyChanging();
					this._DateResponded = value;
					this.SendPropertyChanged("DateResponded");
					this.OnDateRespondedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Mailout_MailoutException", Storage="_MailoutExceptions", ThisKey="ID", OtherKey="MailoutID")]
		public EntitySet<MailoutException> MailoutExceptions
		{
			get
			{
				return this._MailoutExceptions;
			}
			set
			{
				this._MailoutExceptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Mailout", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Mailouts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Mailouts.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Interaction_Mailout", Storage="_Interaction", ThisKey="InteractionUsedID", OtherKey="ID", IsForeignKey=true)]
		public Interaction Interaction
		{
			get
			{
				return this._Interaction.Entity;
			}
			set
			{
				Interaction previousValue = this._Interaction.Entity;
				if (((previousValue != value) 
							|| (this._Interaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Interaction.Entity = null;
						previousValue.Mailouts.Remove(this);
					}
					this._Interaction.Entity = value;
					if ((value != null))
					{
						value.Mailouts.Add(this);
						this._InteractionUsedID = value.ID;
					}
					else
					{
						this._InteractionUsedID = default(int);
					}
					this.SendPropertyChanged("Interaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Mailout", Storage="_Participant", ThisKey="ParticipantID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Participant Participant
		{
			get
			{
				return this._Participant.Entity;
			}
			set
			{
				Participant previousValue = this._Participant.Entity;
				if (((previousValue != value) 
							|| (this._Participant.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Participant.Entity = null;
						previousValue.Mailouts.Remove(this);
					}
					this._Participant.Entity = value;
					if ((value != null))
					{
						value.Mailouts.Add(this);
						this._ParticipantID = value.ID;
					}
					else
					{
						this._ParticipantID = default(int);
					}
					this.SendPropertyChanged("Participant");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Mailout", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.Mailouts.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.Mailouts.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MailoutExceptions(MailoutException entity)
		{
			this.SendPropertyChanging();
			entity.Mailout = this;
		}
		
		private void detach_MailoutExceptions(MailoutException entity)
		{
			this.SendPropertyChanging();
			entity.Mailout = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Participants")]
	public partial class Participant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Email;
		
		private string _Address1;
		
		private string _Address2;
		
		private string _Suburb;
		
		private string _Town;
		
		private string _Association;
		
		private System.Nullable<int> _Age;
		
		private string _Gender;
		
		private string _ContactPhone;
		
		private string _RegistrationCode;
		
		private bool _LoggedIn;
		
		private System.Nullable<bool> _KnowsCareer;
		
		private System.Nullable<int> _LastCustomerID;
		
		private System.Nullable<bool> _Info;
		
		private System.Nullable<bool> _Sync;
		
		private System.Nullable<System.DateTime> _LastSync;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private System.Nullable<int> _EventID;
		
		private EntitySet<Interaction> _Interactions;
		
		private EntitySet<Mailout> _Mailouts;
		
		private EntityRef<Event> _Event;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddress1Changing(string value);
    partial void OnAddress1Changed();
    partial void OnAddress2Changing(string value);
    partial void OnAddress2Changed();
    partial void OnSuburbChanging(string value);
    partial void OnSuburbChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnAssociationChanging(string value);
    partial void OnAssociationChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnContactPhoneChanging(string value);
    partial void OnContactPhoneChanged();
    partial void OnRegistrationCodeChanging(string value);
    partial void OnRegistrationCodeChanged();
    partial void OnLoggedInChanging(bool value);
    partial void OnLoggedInChanged();
    partial void OnKnowsCareerChanging(System.Nullable<bool> value);
    partial void OnKnowsCareerChanged();
    partial void OnLastCustomerIDChanging(System.Nullable<int> value);
    partial void OnLastCustomerIDChanged();
    partial void OnInfoChanging(System.Nullable<bool> value);
    partial void OnInfoChanged();
    partial void OnSyncChanging(System.Nullable<bool> value);
    partial void OnSyncChanged();
    partial void OnLastSyncChanging(System.Nullable<System.DateTime> value);
    partial void OnLastSyncChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnEventIDChanging(System.Nullable<int> value);
    partial void OnEventIDChanged();
    #endregion
		
		public Participant()
		{
			this._Interactions = new EntitySet<Interaction>(new Action<Interaction>(this.attach_Interactions), new Action<Interaction>(this.detach_Interactions));
			this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
			this._Event = default(EntityRef<Event>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address1", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Address1
		{
			get
			{
				return this._Address1;
			}
			set
			{
				if ((this._Address1 != value))
				{
					this.OnAddress1Changing(value);
					this.SendPropertyChanging();
					this._Address1 = value;
					this.SendPropertyChanged("Address1");
					this.OnAddress1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address2", DbType="NVarChar(250)")]
		public string Address2
		{
			get
			{
				return this._Address2;
			}
			set
			{
				if ((this._Address2 != value))
				{
					this.OnAddress2Changing(value);
					this.SendPropertyChanging();
					this._Address2 = value;
					this.SendPropertyChanged("Address2");
					this.OnAddress2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Suburb", DbType="NVarChar(50)")]
		public string Suburb
		{
			get
			{
				return this._Suburb;
			}
			set
			{
				if ((this._Suburb != value))
				{
					this.OnSuburbChanging(value);
					this.SendPropertyChanging();
					this._Suburb = value;
					this.SendPropertyChanged("Suburb");
					this.OnSuburbChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Association", DbType="NVarChar(50)")]
		public string Association
		{
			get
			{
				return this._Association;
			}
			set
			{
				if ((this._Association != value))
				{
					this.OnAssociationChanging(value);
					this.SendPropertyChanging();
					this._Association = value;
					this.SendPropertyChanged("Association");
					this.OnAssociationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(10)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactPhone", DbType="NVarChar(15)")]
		public string ContactPhone
		{
			get
			{
				return this._ContactPhone;
			}
			set
			{
				if ((this._ContactPhone != value))
				{
					this.OnContactPhoneChanging(value);
					this.SendPropertyChanging();
					this._ContactPhone = value;
					this.SendPropertyChanged("ContactPhone");
					this.OnContactPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RegistrationCode", DbType="VarChar(20)")]
		public string RegistrationCode
		{
			get
			{
				return this._RegistrationCode;
			}
			set
			{
				if ((this._RegistrationCode != value))
				{
					this.OnRegistrationCodeChanging(value);
					this.SendPropertyChanging();
					this._RegistrationCode = value;
					this.SendPropertyChanged("RegistrationCode");
					this.OnRegistrationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoggedIn", DbType="Bit NOT NULL")]
		public bool LoggedIn
		{
			get
			{
				return this._LoggedIn;
			}
			set
			{
				if ((this._LoggedIn != value))
				{
					this.OnLoggedInChanging(value);
					this.SendPropertyChanging();
					this._LoggedIn = value;
					this.SendPropertyChanged("LoggedIn");
					this.OnLoggedInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KnowsCareer", DbType="Bit")]
		public System.Nullable<bool> KnowsCareer
		{
			get
			{
				return this._KnowsCareer;
			}
			set
			{
				if ((this._KnowsCareer != value))
				{
					this.OnKnowsCareerChanging(value);
					this.SendPropertyChanging();
					this._KnowsCareer = value;
					this.SendPropertyChanged("KnowsCareer");
					this.OnKnowsCareerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastCustomerID", DbType="Int")]
		public System.Nullable<int> LastCustomerID
		{
			get
			{
				return this._LastCustomerID;
			}
			set
			{
				if ((this._LastCustomerID != value))
				{
					this.OnLastCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._LastCustomerID = value;
					this.SendPropertyChanged("LastCustomerID");
					this.OnLastCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="Bit")]
		public System.Nullable<bool> Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sync", DbType="Bit")]
		public System.Nullable<bool> Sync
		{
			get
			{
				return this._Sync;
			}
			set
			{
				if ((this._Sync != value))
				{
					this.OnSyncChanging(value);
					this.SendPropertyChanging();
					this._Sync = value;
					this.SendPropertyChanged("Sync");
					this.OnSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastSync", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> LastSync
		{
			get
			{
				return this._LastSync;
			}
			set
			{
				if ((this._LastSync != value))
				{
					this.OnLastSyncChanging(value);
					this.SendPropertyChanging();
					this._LastSync = value;
					this.SendPropertyChanged("LastSync");
					this.OnLastSyncChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventID", DbType="Int")]
		public System.Nullable<int> EventID
		{
			get
			{
				return this._EventID;
			}
			set
			{
				if ((this._EventID != value))
				{
					if (this._Event.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventIDChanging(value);
					this.SendPropertyChanging();
					this._EventID = value;
					this.SendPropertyChanged("EventID");
					this.OnEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Interaction", Storage="_Interactions", ThisKey="ID", OtherKey="ParticipantID")]
		public EntitySet<Interaction> Interactions
		{
			get
			{
				return this._Interactions;
			}
			set
			{
				this._Interactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Participant_Mailout", Storage="_Mailouts", ThisKey="ID", OtherKey="ParticipantID")]
		public EntitySet<Mailout> Mailouts
		{
			get
			{
				return this._Mailouts;
			}
			set
			{
				this._Mailouts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Event_Participant", Storage="_Event", ThisKey="EventID", OtherKey="ID", IsForeignKey=true)]
		public Event Event
		{
			get
			{
				return this._Event.Entity;
			}
			set
			{
				Event previousValue = this._Event.Entity;
				if (((previousValue != value) 
							|| (this._Event.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Event.Entity = null;
						previousValue.Participants.Remove(this);
					}
					this._Event.Entity = value;
					if ((value != null))
					{
						value.Participants.Add(this);
						this._EventID = value.ID;
					}
					else
					{
						this._EventID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Event");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Participant = this;
		}
		
		private void detach_Interactions(Interaction entity)
		{
			this.SendPropertyChanging();
			entity.Participant = null;
		}
		
		private void attach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Participant = this;
		}
		
		private void detach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Participant = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Services")]
	public partial class Service : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Mailout> _Mailouts;
		
		private EntitySet<ServiceSubscription> _ServiceSubscriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Service()
		{
			this._Mailouts = new EntitySet<Mailout>(new Action<Mailout>(this.attach_Mailouts), new Action<Mailout>(this.detach_Mailouts));
			this._ServiceSubscriptions = new EntitySet<ServiceSubscription>(new Action<ServiceSubscription>(this.attach_ServiceSubscriptions), new Action<ServiceSubscription>(this.detach_ServiceSubscriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_Mailout", Storage="_Mailouts", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<Mailout> Mailouts
		{
			get
			{
				return this._Mailouts;
			}
			set
			{
				this._Mailouts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceSubscription", Storage="_ServiceSubscriptions", ThisKey="ID", OtherKey="ServiceID")]
		public EntitySet<ServiceSubscription> ServiceSubscriptions
		{
			get
			{
				return this._ServiceSubscriptions;
			}
			set
			{
				this._ServiceSubscriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_Mailouts(Mailout entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
		
		private void attach_ServiceSubscriptions(ServiceSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Service = this;
		}
		
		private void detach_ServiceSubscriptions(ServiceSubscription entity)
		{
			this.SendPropertyChanging();
			entity.Service = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceSubscriptions")]
	public partial class ServiceSubscription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CustomerID;
		
		private int _ServiceID;
		
		private System.DateTime _DateStart;
		
		private System.DateTime _DateEnd;
		
		private System.Xml.Linq.XElement _Parameters;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Service> _Service;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnServiceIDChanging(int value);
    partial void OnServiceIDChanged();
    partial void OnDateStartChanging(System.DateTime value);
    partial void OnDateStartChanged();
    partial void OnDateEndChanging(System.DateTime value);
    partial void OnDateEndChanged();
    partial void OnParametersChanging(System.Xml.Linq.XElement value);
    partial void OnParametersChanged();
    #endregion
		
		public ServiceSubscription()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Service = default(EntityRef<Service>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServiceID", DbType="Int NOT NULL")]
		public int ServiceID
		{
			get
			{
				return this._ServiceID;
			}
			set
			{
				if ((this._ServiceID != value))
				{
					if (this._Service.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnServiceIDChanging(value);
					this.SendPropertyChanging();
					this._ServiceID = value;
					this.SendPropertyChanged("ServiceID");
					this.OnServiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateStart", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateStart
		{
			get
			{
				return this._DateStart;
			}
			set
			{
				if ((this._DateStart != value))
				{
					this.OnDateStartChanging(value);
					this.SendPropertyChanging();
					this._DateStart = value;
					this.SendPropertyChanged("DateStart");
					this.OnDateStartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEnd", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateEnd
		{
			get
			{
				return this._DateEnd;
			}
			set
			{
				if ((this._DateEnd != value))
				{
					this.OnDateEndChanging(value);
					this.SendPropertyChanging();
					this._DateEnd = value;
					this.SendPropertyChanged("DateEnd");
					this.OnDateEndChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Parameters", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Parameters
		{
			get
			{
				return this._Parameters;
			}
			set
			{
				if ((this._Parameters != value))
				{
					this.OnParametersChanging(value);
					this.SendPropertyChanging();
					this._Parameters = value;
					this.SendPropertyChanged("Parameters");
					this.OnParametersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_ServiceSubscription", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.ServiceSubscriptions.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.ServiceSubscriptions.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Service_ServiceSubscription", Storage="_Service", ThisKey="ServiceID", OtherKey="ID", IsForeignKey=true)]
		public Service Service
		{
			get
			{
				return this._Service.Entity;
			}
			set
			{
				Service previousValue = this._Service.Entity;
				if (((previousValue != value) 
							|| (this._Service.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Service.Entity = null;
						previousValue.ServiceSubscriptions.Remove(this);
					}
					this._Service.Entity = value;
					if ((value != null))
					{
						value.ServiceSubscriptions.Add(this);
						this._ServiceID = value.ID;
					}
					else
					{
						this._ServiceID = default(int);
					}
					this.SendPropertyChanged("Service");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SubscribedLog")]
	public partial class SubscribedLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubscribedLogID;
		
		private int _InteractionID;
		
		private System.DateTime _DateModified;
		
		private System.Nullable<bool> _Subscribed;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubscribedLogIDChanging(int value);
    partial void OnSubscribedLogIDChanged();
    partial void OnInteractionIDChanging(int value);
    partial void OnInteractionIDChanged();
    partial void OnDateModifiedChanging(System.DateTime value);
    partial void OnDateModifiedChanged();
    partial void OnSubscribedChanging(System.Nullable<bool> value);
    partial void OnSubscribedChanged();
    #endregion
		
		public SubscribedLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubscribedLogID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubscribedLogID
		{
			get
			{
				return this._SubscribedLogID;
			}
			set
			{
				if ((this._SubscribedLogID != value))
				{
					this.OnSubscribedLogIDChanging(value);
					this.SendPropertyChanging();
					this._SubscribedLogID = value;
					this.SendPropertyChanged("SubscribedLogID");
					this.OnSubscribedLogIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionID", DbType="Int NOT NULL")]
		public int InteractionID
		{
			get
			{
				return this._InteractionID;
			}
			set
			{
				if ((this._InteractionID != value))
				{
					this.OnInteractionIDChanging(value);
					this.SendPropertyChanging();
					this._InteractionID = value;
					this.SendPropertyChanged("InteractionID");
					this.OnInteractionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateModified", DbType="DateTime NOT NULL")]
		public System.DateTime DateModified
		{
			get
			{
				return this._DateModified;
			}
			set
			{
				if ((this._DateModified != value))
				{
					this.OnDateModifiedChanging(value);
					this.SendPropertyChanging();
					this._DateModified = value;
					this.SendPropertyChanged("DateModified");
					this.OnDateModifiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subscribed", DbType="Bit")]
		public System.Nullable<bool> Subscribed
		{
			get
			{
				return this._Subscribed;
			}
			set
			{
				if ((this._Subscribed != value))
				{
					this.OnSubscribedChanging(value);
					this.SendPropertyChanging();
					this._Subscribed = value;
					this.SendPropertyChanged("Subscribed");
					this.OnSubscribedChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SyncErrors")]
	public partial class SyncError : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TableName;
		
		private int _RecordID;
		
		private string _ServerMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnRecordIDChanging(int value);
    partial void OnRecordIDChanged();
    partial void OnServerMessageChanging(string value);
    partial void OnServerMessageChanged();
    #endregion
		
		public SyncError()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordID", DbType="Int NOT NULL")]
		public int RecordID
		{
			get
			{
				return this._RecordID;
			}
			set
			{
				if ((this._RecordID != value))
				{
					this.OnRecordIDChanging(value);
					this.SendPropertyChanging();
					this._RecordID = value;
					this.SendPropertyChanged("RecordID");
					this.OnRecordIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerMessage", DbType="NVarChar(MAX)")]
		public string ServerMessage
		{
			get
			{
				return this._ServerMessage;
			}
			set
			{
				if ((this._ServerMessage != value))
				{
					this.OnServerMessageChanging(value);
					this.SendPropertyChanging();
					this._ServerMessage = value;
					this.SendPropertyChanged("ServerMessage");
					this.OnServerMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SyncLog")]
	public partial class SyncLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _DateTime;
		
		private int _RecordsTransfered;
		
		private int _TotalRecords;
		
		private string _ServerMessage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateTimeChanging(System.DateTime value);
    partial void OnDateTimeChanged();
    partial void OnRecordsTransferedChanging(int value);
    partial void OnRecordsTransferedChanged();
    partial void OnTotalRecordsChanging(int value);
    partial void OnTotalRecordsChanged();
    partial void OnServerMessageChanging(string value);
    partial void OnServerMessageChanged();
    #endregion
		
		public SyncLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTime", DbType="DateTime NOT NULL")]
		public System.DateTime DateTime
		{
			get
			{
				return this._DateTime;
			}
			set
			{
				if ((this._DateTime != value))
				{
					this.OnDateTimeChanging(value);
					this.SendPropertyChanging();
					this._DateTime = value;
					this.SendPropertyChanged("DateTime");
					this.OnDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RecordsTransfered", DbType="Int NOT NULL")]
		public int RecordsTransfered
		{
			get
			{
				return this._RecordsTransfered;
			}
			set
			{
				if ((this._RecordsTransfered != value))
				{
					this.OnRecordsTransferedChanging(value);
					this.SendPropertyChanging();
					this._RecordsTransfered = value;
					this.SendPropertyChanged("RecordsTransfered");
					this.OnRecordsTransferedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalRecords", DbType="Int NOT NULL")]
		public int TotalRecords
		{
			get
			{
				return this._TotalRecords;
			}
			set
			{
				if ((this._TotalRecords != value))
				{
					this.OnTotalRecordsChanging(value);
					this.SendPropertyChanging();
					this._TotalRecords = value;
					this.SendPropertyChanged("TotalRecords");
					this.OnTotalRecordsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ServerMessage", DbType="NVarChar(MAX)")]
		public string ServerMessage
		{
			get
			{
				return this._ServerMessage;
			}
			set
			{
				if ((this._ServerMessage != value))
				{
					this.OnServerMessageChanging(value);
					this.SendPropertyChanging();
					this._ServerMessage = value;
					this.SendPropertyChanged("ServerMessage");
					this.OnServerMessageChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
